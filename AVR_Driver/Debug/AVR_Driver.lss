
AVR_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00000f42  00000fd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000b4  008000b4  0000102a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000102a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000105c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025c8  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d3e  00000000  00000000  000039f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b69  00000000  00000000  00004736  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009b8  00000000  00000000  000062a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f31  00000000  00000000  00006c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c6e  00000000  00000000  00007b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  000097f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__vector_1>
   8:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__vector_2>
   c:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 76 07 	jmp	0xeec	; 0xeec <__vector_6>
  1c:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__vector_7>
  20:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__vector_8>
  24:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__vector_9>
  28:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__vector_10>
  2c:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3b       	cpi	r26, 0xB4	; 180
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 eb       	ldi	r26, 0xB4	; 180
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3c       	cpi	r26, 0xCE	; 206
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1a 02 	call	0x434	; 0x434 <main>
  8a:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KeYPad_Init>:
 */ 
#include "Keypad.h"

void KeYPad_Init()
{
	Keypad_PORT_Dir = 0xF0 ; 
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	87 bb       	out	0x17, r24	; 23
	KeyPAd_PORT_Data= 0xFF ; 
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret

0000009c <KeyPAd_Scan>:
}
char KeyPAd_Scan()
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	00 d0       	rcall	.+0      	; 0xa2 <KeyPAd_Scan+0x6>
  a2:	00 d0       	rcall	.+0      	; 0xa4 <KeyPAd_Scan+0x8>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	uint8_t ROWS[]={R0,R1,R2,R3};
  a8:	19 82       	std	Y+1, r1	; 0x01
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	8a 83       	std	Y+2, r24	; 0x02
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	8b 83       	std	Y+3, r24	; 0x03
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	8c 83       	std	Y+4, r24	; 0x04

	uint8_t i,j,Result='a';
	for(i = 0 ; i < 4 ; i++)
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	79 c0       	rjmp	.+242    	; 0x1ac <KeyPAd_Scan+0x110>
	{
		KeyPAd_PORT_Data |=((1<<4)|(1<<5)|(1<<6)|(1<<7));
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	80 6f       	ori	r24, 0xF0	; 240
  be:	88 bb       	out	0x18, r24	; 24
		CLEAR_BIT(KeyPAd_PORT_Data,(i+4));
  c0:	28 b3       	in	r18, 0x18	; 24
  c2:	46 2f       	mov	r20, r22
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	4c 5f       	subi	r20, 0xFC	; 252
  c8:	5f 4f       	sbci	r21, 0xFF	; 255
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <KeyPAd_Scan+0x38>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	4a 95       	dec	r20
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <KeyPAd_Scan+0x34>
  d8:	80 95       	com	r24
  da:	82 23       	and	r24, r18
  dc:	88 bb       	out	0x18, r24	; 24
		for(j=0 ; j<4 ; j++)
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	61 c0       	rjmp	.+194    	; 0x1a4 <KeyPAd_Scan+0x108>
		{
			if(!(KeyPad_Pin&(1<<ROWS[j])))
  e2:	86 b3       	in	r24, 0x16	; 22
  e4:	e1 e0       	ldi	r30, 0x01	; 1
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	ec 0f       	add	r30, r28
  ea:	fd 1f       	adc	r31, r29
  ec:	e2 0f       	add	r30, r18
  ee:	f1 1d       	adc	r31, r1
  f0:	30 81       	ld	r19, Z
  f2:	43 2f       	mov	r20, r19
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <KeyPAd_Scan+0x60>
  f8:	95 95       	asr	r25
  fa:	87 95       	ror	r24
  fc:	3a 95       	dec	r19
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <KeyPAd_Scan+0x5c>
 100:	80 fd       	sbrc	r24, 0
 102:	4f c0       	rjmp	.+158    	; 0x1a2 <KeyPAd_Scan+0x106>
			{
				while(!(KeyPad_Pin&(1<<ROWS[j])));
 104:	86 b3       	in	r24, 0x16	; 22
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	04 2e       	mov	r0, r20
 10a:	02 c0       	rjmp	.+4      	; 0x110 <KeyPAd_Scan+0x74>
 10c:	95 95       	asr	r25
 10e:	87 95       	ror	r24
 110:	0a 94       	dec	r0
 112:	e2 f7       	brpl	.-8      	; 0x10c <KeyPAd_Scan+0x70>
 114:	80 ff       	sbrs	r24, 0
 116:	f6 cf       	rjmp	.-20     	; 0x104 <KeyPAd_Scan+0x68>
				switch(i)
 118:	61 30       	cpi	r22, 0x01	; 1
 11a:	b1 f0       	breq	.+44     	; 0x148 <KeyPAd_Scan+0xac>
 11c:	28 f0       	brcs	.+10     	; 0x128 <KeyPAd_Scan+0x8c>
 11e:	62 30       	cpi	r22, 0x02	; 2
 120:	11 f1       	breq	.+68     	; 0x166 <KeyPAd_Scan+0xca>
 122:	63 30       	cpi	r22, 0x03	; 3
 124:	79 f1       	breq	.+94     	; 0x184 <KeyPAd_Scan+0xe8>
 126:	47 c0       	rjmp	.+142    	; 0x1b6 <KeyPAd_Scan+0x11a>
				{
					case 0 :
						switch(j)
 128:	21 30       	cpi	r18, 0x01	; 1
 12a:	41 f0       	breq	.+16     	; 0x13c <KeyPAd_Scan+0xa0>
 12c:	08 f4       	brcc	.+2      	; 0x130 <KeyPAd_Scan+0x94>
 12e:	45 c0       	rjmp	.+138    	; 0x1ba <KeyPAd_Scan+0x11e>
 130:	22 30       	cpi	r18, 0x02	; 2
 132:	31 f0       	breq	.+12     	; 0x140 <KeyPAd_Scan+0xa4>
 134:	23 30       	cpi	r18, 0x03	; 3
 136:	31 f0       	breq	.+12     	; 0x144 <KeyPAd_Scan+0xa8>
}
char KeyPAd_Scan()
{
	uint8_t ROWS[]={R0,R1,R2,R3};

	uint8_t i,j,Result='a';
 138:	81 e6       	ldi	r24, 0x61	; 97
 13a:	46 c0       	rjmp	.+140    	; 0x1c8 <KeyPAd_Scan+0x12c>
				{
					case 0 :
						switch(j)
						{
							case 0:Result='7';break;
							case 1:Result='4';break;
 13c:	84 e3       	ldi	r24, 0x34	; 52
 13e:	44 c0       	rjmp	.+136    	; 0x1c8 <KeyPAd_Scan+0x12c>
							case 2:Result='1';break;
 140:	81 e3       	ldi	r24, 0x31	; 49
 142:	42 c0       	rjmp	.+132    	; 0x1c8 <KeyPAd_Scan+0x12c>
							case 3:Result='?';break;
 144:	8f e3       	ldi	r24, 0x3F	; 63
 146:	40 c0       	rjmp	.+128    	; 0x1c8 <KeyPAd_Scan+0x12c>
						}
					break;
					case 1:
						switch(j)
 148:	21 30       	cpi	r18, 0x01	; 1
 14a:	39 f0       	breq	.+14     	; 0x15a <KeyPAd_Scan+0xbe>
 14c:	c0 f1       	brcs	.+112    	; 0x1be <KeyPAd_Scan+0x122>
 14e:	22 30       	cpi	r18, 0x02	; 2
 150:	31 f0       	breq	.+12     	; 0x15e <KeyPAd_Scan+0xc2>
 152:	23 30       	cpi	r18, 0x03	; 3
 154:	31 f0       	breq	.+12     	; 0x162 <KeyPAd_Scan+0xc6>
}
char KeyPAd_Scan()
{
	uint8_t ROWS[]={R0,R1,R2,R3};

	uint8_t i,j,Result='a';
 156:	81 e6       	ldi	r24, 0x61	; 97
 158:	37 c0       	rjmp	.+110    	; 0x1c8 <KeyPAd_Scan+0x12c>
					break;
					case 1:
						switch(j)
						{
							case 0:Result='8';break;
							case 1:Result='5';break;
 15a:	85 e3       	ldi	r24, 0x35	; 53
 15c:	35 c0       	rjmp	.+106    	; 0x1c8 <KeyPAd_Scan+0x12c>
							case 2:Result='2';break;
 15e:	82 e3       	ldi	r24, 0x32	; 50
 160:	33 c0       	rjmp	.+102    	; 0x1c8 <KeyPAd_Scan+0x12c>
							case 3:Result='0';break;
 162:	80 e3       	ldi	r24, 0x30	; 48
 164:	31 c0       	rjmp	.+98     	; 0x1c8 <KeyPAd_Scan+0x12c>
						}
					break;
					case 2 :
						switch(j)
 166:	21 30       	cpi	r18, 0x01	; 1
 168:	39 f0       	breq	.+14     	; 0x178 <KeyPAd_Scan+0xdc>
 16a:	58 f1       	brcs	.+86     	; 0x1c2 <KeyPAd_Scan+0x126>
 16c:	22 30       	cpi	r18, 0x02	; 2
 16e:	31 f0       	breq	.+12     	; 0x17c <KeyPAd_Scan+0xe0>
 170:	23 30       	cpi	r18, 0x03	; 3
 172:	31 f0       	breq	.+12     	; 0x180 <KeyPAd_Scan+0xe4>
}
char KeyPAd_Scan()
{
	uint8_t ROWS[]={R0,R1,R2,R3};

	uint8_t i,j,Result='a';
 174:	81 e6       	ldi	r24, 0x61	; 97
 176:	28 c0       	rjmp	.+80     	; 0x1c8 <KeyPAd_Scan+0x12c>
					break;
					case 2 :
						switch(j)
						{
							case 0:Result='9';break;
							case 1:Result='6';break;
 178:	86 e3       	ldi	r24, 0x36	; 54
 17a:	26 c0       	rjmp	.+76     	; 0x1c8 <KeyPAd_Scan+0x12c>
							case 2:Result='3';break;
 17c:	83 e3       	ldi	r24, 0x33	; 51
 17e:	24 c0       	rjmp	.+72     	; 0x1c8 <KeyPAd_Scan+0x12c>
							case 3:Result='=';break;
 180:	8d e3       	ldi	r24, 0x3D	; 61
 182:	22 c0       	rjmp	.+68     	; 0x1c8 <KeyPAd_Scan+0x12c>
						}
					break;
					case 3 :
						switch(j)
 184:	21 30       	cpi	r18, 0x01	; 1
 186:	39 f0       	breq	.+14     	; 0x196 <KeyPAd_Scan+0xfa>
 188:	f0 f0       	brcs	.+60     	; 0x1c6 <KeyPAd_Scan+0x12a>
 18a:	22 30       	cpi	r18, 0x02	; 2
 18c:	31 f0       	breq	.+12     	; 0x19a <KeyPAd_Scan+0xfe>
 18e:	23 30       	cpi	r18, 0x03	; 3
 190:	31 f0       	breq	.+12     	; 0x19e <KeyPAd_Scan+0x102>
}
char KeyPAd_Scan()
{
	uint8_t ROWS[]={R0,R1,R2,R3};

	uint8_t i,j,Result='a';
 192:	81 e6       	ldi	r24, 0x61	; 97
 194:	19 c0       	rjmp	.+50     	; 0x1c8 <KeyPAd_Scan+0x12c>
					break;
					case 3 :
						switch(j)
						{
							case 0:Result='/';break;
							case 1:Result='*';break;
 196:	8a e2       	ldi	r24, 0x2A	; 42
 198:	17 c0       	rjmp	.+46     	; 0x1c8 <KeyPAd_Scan+0x12c>
							case 2:Result='-';break;
 19a:	8d e2       	ldi	r24, 0x2D	; 45
 19c:	15 c0       	rjmp	.+42     	; 0x1c8 <KeyPAd_Scan+0x12c>
							case 3:Result='+';break;
 19e:	8b e2       	ldi	r24, 0x2B	; 43
 1a0:	13 c0       	rjmp	.+38     	; 0x1c8 <KeyPAd_Scan+0x12c>
	uint8_t i,j,Result='a';
	for(i = 0 ; i < 4 ; i++)
	{
		KeyPAd_PORT_Data |=((1<<4)|(1<<5)|(1<<6)|(1<<7));
		CLEAR_BIT(KeyPAd_PORT_Data,(i+4));
		for(j=0 ; j<4 ; j++)
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	24 30       	cpi	r18, 0x04	; 4
 1a6:	08 f4       	brcc	.+2      	; 0x1aa <KeyPAd_Scan+0x10e>
 1a8:	9c cf       	rjmp	.-200    	; 0xe2 <KeyPAd_Scan+0x46>
char KeyPAd_Scan()
{
	uint8_t ROWS[]={R0,R1,R2,R3};

	uint8_t i,j,Result='a';
	for(i = 0 ; i < 4 ; i++)
 1aa:	6f 5f       	subi	r22, 0xFF	; 255
 1ac:	64 30       	cpi	r22, 0x04	; 4
 1ae:	08 f4       	brcc	.+2      	; 0x1b2 <KeyPAd_Scan+0x116>
 1b0:	84 cf       	rjmp	.-248    	; 0xba <KeyPAd_Scan+0x1e>
				}
				return Result ;
			}
		}
	}
	return Result ;
 1b2:	81 e6       	ldi	r24, 0x61	; 97
 1b4:	09 c0       	rjmp	.+18     	; 0x1c8 <KeyPAd_Scan+0x12c>
}
char KeyPAd_Scan()
{
	uint8_t ROWS[]={R0,R1,R2,R3};

	uint8_t i,j,Result='a';
 1b6:	81 e6       	ldi	r24, 0x61	; 97
 1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <KeyPAd_Scan+0x12c>
				switch(i)
				{
					case 0 :
						switch(j)
						{
							case 0:Result='7';break;
 1ba:	87 e3       	ldi	r24, 0x37	; 55
 1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <KeyPAd_Scan+0x12c>
						}
					break;
					case 1:
						switch(j)
						{
							case 0:Result='8';break;
 1be:	88 e3       	ldi	r24, 0x38	; 56
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <KeyPAd_Scan+0x12c>
						}
					break;
					case 2 :
						switch(j)
						{
							case 0:Result='9';break;
 1c2:	89 e3       	ldi	r24, 0x39	; 57
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <KeyPAd_Scan+0x12c>
						}
					break;
					case 3 :
						switch(j)
						{
							case 0:Result='/';break;
 1c6:	8f e2       	ldi	r24, 0x2F	; 47
				return Result ;
			}
		}
	}
	return Result ;
}
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <LCD_Enable>:
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Enable ()
{
	DIO_Write_Pin(PORT_LCD_A,EN_SWITCH,HIGH);
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <DIO_Write_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	2f e7       	ldi	r18, 0x7F	; 127
 1e2:	88 e3       	ldi	r24, 0x38	; 56
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <LCD_Enable+0x10>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCD_Enable+0x1a>
 1f0:	00 00       	nop
	_delay_ms(50);
	DIO_Write_Pin(PORT_LCD_A,EN_SWITCH,LOW);
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	62 e0       	ldi	r22, 0x02	; 2
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <DIO_Write_Pin>
 1fc:	08 95       	ret

000001fe <LCD_Wirte_Cmd>:
 * 			@param [in]					-Cmd Command user will inter to preform specific operation					*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Wirte_Cmd (uint8_t Cmd)
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	c8 2f       	mov	r28, r24
	DIO_Write_Pin(PORT_LCD_A,RS_SWITCH,LOW);
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <DIO_Write_Pin>
	DIO_Write_Pin(PORT_LCD_A,RW_SWITCH,LOW);
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <DIO_Write_Pin>
	
	#ifdef FOUR_BIT_MODE
	

	LCD_DATA = (LCD_DATA&0x0F) | (Cmd&0xF0);  
 218:	8b b3       	in	r24, 0x1b	; 27
 21a:	8f 70       	andi	r24, 0x0F	; 15
 21c:	9c 2f       	mov	r25, r28
 21e:	90 7f       	andi	r25, 0xF0	; 240
 220:	89 2b       	or	r24, r25
 222:	8b bb       	out	0x1b, r24	; 27
	LCD_Enable ();
 224:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Enable>
 228:	8f ec       	ldi	r24, 0xCF	; 207
 22a:	97 e0       	ldi	r25, 0x07	; 7
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <LCD_Wirte_Cmd+0x2e>
 230:	00 c0       	rjmp	.+0      	; 0x232 <LCD_Wirte_Cmd+0x34>
 232:	00 00       	nop
	_delay_ms(1);
	if (Init_Is_Finshed)
 234:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end>
 238:	88 23       	and	r24, r24
 23a:	49 f0       	breq	.+18     	; 0x24e <LCD_Wirte_Cmd+0x50>
	{
		
		LCD_DATA = (((LCD_DATA&0x0F) | (Cmd&0x0F))<<4);
 23c:	8b b3       	in	r24, 0x1b	; 27
 23e:	c8 2b       	or	r28, r24
 240:	90 e1       	ldi	r25, 0x10	; 16
 242:	c9 9f       	mul	r28, r25
 244:	e0 01       	movw	r28, r0
 246:	11 24       	eor	r1, r1
 248:	cb bb       	out	0x1b, r28	; 27
		LCD_Enable ();
 24a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Enable>
 24e:	8f e9       	ldi	r24, 0x9F	; 159
 250:	9f e0       	ldi	r25, 0x0F	; 15
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <LCD_Wirte_Cmd+0x54>
 256:	00 c0       	rjmp	.+0      	; 0x258 <LCD_Wirte_Cmd+0x5a>
 258:	00 00       	nop
	#ifdef EIGHT_BIT_MODE
	LCD_DATA = Cmd ;
	LCD_Enable();
	#endif
	_delay_ms(2);
}
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <LCD_Clear_Screen>:
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Clear_Screen ()
{
	LCD_Wirte_Cmd(LCD_CLEAR_SCREEN);
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Wirte_Cmd>
 266:	08 95       	ret

00000268 <LCD_Init>:
 268:	8f e3       	ldi	r24, 0x3F	; 63
 26a:	9c e9       	ldi	r25, 0x9C	; 156
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_Init+0x4>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_Init+0xa>
 272:	00 00       	nop
 ********************************************************************************************************************/
void LCD_Init()
{
	_delay_ms(20) ;
	
	SET_BIT(LCD_CTRL_DIR,RS_SWITCH);
 274:	8a b3       	in	r24, 0x1a	; 26
 276:	81 60       	ori	r24, 0x01	; 1
 278:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(LCD_CTRL_DIR,RW_SWITCH);
 27a:	8a b3       	in	r24, 0x1a	; 26
 27c:	82 60       	ori	r24, 0x02	; 2
 27e:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(LCD_CTRL_DIR,EN_SWITCH);
 280:	8a b3       	in	r24, 0x1a	; 26
 282:	84 60       	ori	r24, 0x04	; 4
 284:	8a bb       	out	0x1a, r24	; 26

	CLEAR_BIT(LCD_CTRL,RS_SWITCH);
 286:	8b b3       	in	r24, 0x1b	; 27
 288:	8e 7f       	andi	r24, 0xFE	; 254
 28a:	8b bb       	out	0x1b, r24	; 27
	CLEAR_BIT(LCD_CTRL,RW_SWITCH);
 28c:	8b b3       	in	r24, 0x1b	; 27
 28e:	8d 7f       	andi	r24, 0xFD	; 253
 290:	8b bb       	out	0x1b, r24	; 27
	CLEAR_BIT(LCD_CTRL,EN_SWITCH);
 292:	8b b3       	in	r24, 0x1b	; 27
 294:	8b 7f       	andi	r24, 0xFB	; 251
 296:	8b bb       	out	0x1b, r24	; 27
#ifdef EIGHT_BIT_MODE
	SET_REG(LCD_DATA_DIR);
#endif 

#ifdef FOUR_BIT_MODE
	SET_BIT(LCD_DATA_DIR,4);
 298:	8a b3       	in	r24, 0x1a	; 26
 29a:	80 61       	ori	r24, 0x10	; 16
 29c:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(LCD_DATA_DIR,5);
 29e:	8a b3       	in	r24, 0x1a	; 26
 2a0:	80 62       	ori	r24, 0x20	; 32
 2a2:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(LCD_DATA_DIR,6);
 2a4:	8a b3       	in	r24, 0x1a	; 26
 2a6:	80 64       	ori	r24, 0x40	; 64
 2a8:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(LCD_DATA_DIR,7);
 2aa:	8a b3       	in	r24, 0x1a	; 26
 2ac:	80 68       	ori	r24, 0x80	; 128
 2ae:	8a bb       	out	0x1a, r24	; 26
 2b0:	8f e2       	ldi	r24, 0x2F	; 47
 2b2:	95 e7       	ldi	r25, 0x75	; 117
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCD_Init+0x4c>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <LCD_Init+0x52>
 2ba:	00 00       	nop
#endif 
	_delay_ms(15);
	LCD_Clear_Screen();
 2bc:	0e 94 30 01 	call	0x260	; 0x260 <LCD_Clear_Screen>
	LCD_Wirte_Cmd(LCD_FUNCTION_8BIT_2LINES);
	#endif
	
#ifdef FOUR_BIT_MODE	

	LCD_Wirte_Cmd(0x20);
 2c0:	80 e2       	ldi	r24, 0x20	; 32
 2c2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0x20);
 2c6:	80 e2       	ldi	r24, 0x20	; 32
 2c8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0x80);
 2cc:	80 e8       	ldi	r24, 0x80	; 128
 2ce:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Wirte_Cmd>
 2d2:	8f ec       	ldi	r24, 0xCF	; 207
 2d4:	97 e0       	ldi	r25, 0x07	; 7
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCD_Init+0x6e>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCD_Init+0x74>
 2dc:	00 00       	nop
	_delay_ms(1);
	
	LCD_Wirte_Cmd(0x00);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0xF0);
 2e4:	80 ef       	ldi	r24, 0xF0	; 240
 2e6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Wirte_Cmd>
 2ea:	8f ec       	ldi	r24, 0xCF	; 207
 2ec:	97 e0       	ldi	r25, 0x07	; 7
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCD_Init+0x86>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <LCD_Init+0x8c>
 2f4:	00 00       	nop
	_delay_ms(1);
	
	LCD_Wirte_Cmd(0x00);
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0x10);
 2fc:	80 e1       	ldi	r24, 0x10	; 16
 2fe:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Wirte_Cmd>
 302:	8f e9       	ldi	r24, 0x9F	; 159
 304:	9f e0       	ldi	r25, 0x0F	; 15
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <LCD_Init+0x9e>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_Init+0xa4>
 30c:	00 00       	nop
	_delay_ms(2);
	
// 	LCD_Wirte_Cmd(0x00);	By Default
// 	LCD_Wirte_Cmd(0x60);	By Default

	Init_Is_Finshed = 1 ; // when we init LCD in case four bit we will send 0x2xxxx  , 0x2xxxx , 0x8xxxx
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__data_end>
	// SO When we send 0x0010 0000 last four bit will be read from lcd and 0000 will not be read
	#endif
	LCD_Wirte_Cmd(LCD_ENTRY_MODE);
 314:	86 e0       	ldi	r24, 0x06	; 6
 316:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(LCD_BEGIN_AT_FIRST_ROW);
 31a:	80 e8       	ldi	r24, 0x80	; 128
 31c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(LCD_DISP_ON_CURSOR_BLINK);	
 320:	8f e0       	ldi	r24, 0x0F	; 15
 322:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Wirte_Cmd>
 326:	08 95       	ret

00000328 <Lcd_Write_Char>:
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 *******************************************************************************************************************/

void Lcd_Write_Char(uint8_t Char)
{
 328:	cf 93       	push	r28
 32a:	c8 2f       	mov	r28, r24
	
	DIO_Write_Pin(PORT_LCD_A,RS_SWITCH,HIGH);
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <DIO_Write_Pin>
	DIO_Write_Pin(PORT_LCD_A,RW_SWITCH,LOW);
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <DIO_Write_Pin>
#ifdef FOUR_BIT_MODE
	LCD_DATA = (LCD_DATA&0x0F) | (Char&0xF0);
 340:	8b b3       	in	r24, 0x1b	; 27
 342:	8f 70       	andi	r24, 0x0F	; 15
 344:	9c 2f       	mov	r25, r28
 346:	90 7f       	andi	r25, 0xF0	; 240
 348:	89 2b       	or	r24, r25
 34a:	8b bb       	out	0x1b, r24	; 27
	LCD_Enable ();
 34c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Enable>
 350:	8f ec       	ldi	r24, 0xCF	; 207
 352:	97 e0       	ldi	r25, 0x07	; 7
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <Lcd_Write_Char+0x2c>
 358:	00 c0       	rjmp	.+0      	; 0x35a <Lcd_Write_Char+0x32>
 35a:	00 00       	nop
	_delay_ms(1);
	LCD_DATA = (((LCD_DATA&0x0F) | (Char&0x0F)<<4));
 35c:	2b b3       	in	r18, 0x1b	; 27
 35e:	30 e1       	ldi	r19, 0x10	; 16
 360:	c3 9f       	mul	r28, r19
 362:	c0 01       	movw	r24, r0
 364:	11 24       	eor	r1, r1
 366:	92 2f       	mov	r25, r18
 368:	9f 70       	andi	r25, 0x0F	; 15
 36a:	89 2b       	or	r24, r25
 36c:	8b bb       	out	0x1b, r24	; 27
	LCD_Enable ();
 36e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Enable>
#ifdef EIGHT_BIT_MODE
	_delay_ms(1);
	LCD_DATA = Char ;
	LCD_Enable();
#endif
}
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <LCD_GO_TO_INDEX>:
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_GO_TO_INDEX(uint8_t ROW , uint8_t COL)
{
	uint8_t Address ; 
	if (ROW<2 && COL <16){
 376:	82 30       	cpi	r24, 0x02	; 2
 378:	50 f4       	brcc	.+20     	; 0x38e <LCD_GO_TO_INDEX+0x18>
 37a:	60 31       	cpi	r22, 0x10	; 16
 37c:	40 f4       	brcc	.+16     	; 0x38e <LCD_GO_TO_INDEX+0x18>
		Address = ( ROW * Second_Row_Address ) + COL; // We multiply the row number by the starting address of the second row and add the column value
 37e:	90 e4       	ldi	r25, 0x40	; 64
 380:	89 9f       	mul	r24, r25
 382:	60 0d       	add	r22, r0
 384:	11 24       	eor	r1, r1
 386:	86 2f       	mov	r24, r22
		SET_BIT(Address,7);	// To set DDRAM Address we must set bit7 in Address . Address here limit by 7bits becouse has 80 Location
		LCD_Wirte_Cmd(Address);
 388:	80 68       	ori	r24, 0x80	; 128
 38a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Wirte_Cmd>
 38e:	08 95       	ret

00000390 <LCD_Write_String>:
 *			@param [in]					-COL																		*		
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Write_String( uint8_t* STRING , uint8_t ROW , uint8_t COL)
{
 390:	ef 92       	push	r14
 392:	ff 92       	push	r15
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	8c 01       	movw	r16, r24
 39e:	d6 2f       	mov	r29, r22
 3a0:	f4 2e       	mov	r15, r20
	LCD_GO_TO_INDEX(ROW,COL);
 3a2:	64 2f       	mov	r22, r20
 3a4:	8d 2f       	mov	r24, r29
 3a6:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_GO_TO_INDEX>
	uint8_t index = 0 ;
	uint8_t Line = 0 ;
 3aa:	e1 2c       	mov	r14, r1
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Write_String( uint8_t* STRING , uint8_t ROW , uint8_t COL)
{
	LCD_GO_TO_INDEX(ROW,COL);
	uint8_t index = 0 ;
 3ac:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t Line = 0 ;
	while(STRING[index]!='\0' && ((ROW*16)+(index+COL))<=32 )  // Know if there are empty position in 2 * 16 LCD 
 3ae:	1c c0       	rjmp	.+56     	; 0x3e8 <LCD_Write_String+0x58>
	{
		if (( (ROW*16)+(index+COL) )<16 ) // Write in First Row 
 3b0:	20 31       	cpi	r18, 0x10	; 16
 3b2:	31 05       	cpc	r19, r1
 3b4:	24 f4       	brge	.+8      	; 0x3be <LCD_Write_String+0x2e>
		{
			Lcd_Write_Char(STRING[index]);
 3b6:	0e 94 94 01 	call	0x328	; 0x328 <Lcd_Write_Char>
			index++;
 3ba:	cf 5f       	subi	r28, 0xFF	; 255
 3bc:	15 c0       	rjmp	.+42     	; 0x3e8 <LCD_Write_String+0x58>
		}
		else if (( (ROW*16)+(index+COL) ) == 16 && Line == 0 ) // IF I REACH END OF ROW0 I WILL MOVE TO ROW1 
 3be:	20 31       	cpi	r18, 0x10	; 16
 3c0:	31 05       	cpc	r19, r1
 3c2:	49 f4       	brne	.+18     	; 0x3d6 <LCD_Write_String+0x46>
 3c4:	e1 10       	cpse	r14, r1
 3c6:	07 c0       	rjmp	.+14     	; 0x3d6 <LCD_Write_String+0x46>
		{
			LCD_GO_TO_INDEX(1,0) ; 
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_GO_TO_INDEX>
			Line = 1 ; 
 3d0:	ee 24       	eor	r14, r14
 3d2:	e3 94       	inc	r14
 3d4:	09 c0       	rjmp	.+18     	; 0x3e8 <LCD_Write_String+0x58>
		}
		else if (( (ROW*16)+(index+COL) ) < 32 && Line==1  ) // i will start write in ROW1 till end of Row
 3d6:	20 32       	cpi	r18, 0x20	; 32
 3d8:	31 05       	cpc	r19, r1
 3da:	34 f4       	brge	.+12     	; 0x3e8 <LCD_Write_String+0x58>
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	e9 12       	cpse	r14, r25
 3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <LCD_Write_String+0x58>
		{
			Lcd_Write_Char(STRING[index]);
 3e2:	0e 94 94 01 	call	0x328	; 0x328 <Lcd_Write_Char>
			index++ ;
 3e6:	cf 5f       	subi	r28, 0xFF	; 255
void LCD_Write_String( uint8_t* STRING , uint8_t ROW , uint8_t COL)
{
	LCD_GO_TO_INDEX(ROW,COL);
	uint8_t index = 0 ;
	uint8_t Line = 0 ;
	while(STRING[index]!='\0' && ((ROW*16)+(index+COL))<=32 )  // Know if there are empty position in 2 * 16 LCD 
 3e8:	f8 01       	movw	r30, r16
 3ea:	ec 0f       	add	r30, r28
 3ec:	f1 1d       	adc	r31, r1
 3ee:	80 81       	ld	r24, Z
 3f0:	88 23       	and	r24, r24
 3f2:	61 f0       	breq	.+24     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3f4:	2f 2d       	mov	r18, r15
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	2c 0f       	add	r18, r28
 3fa:	31 1d       	adc	r19, r1
 3fc:	90 e1       	ldi	r25, 0x10	; 16
 3fe:	d9 9f       	mul	r29, r25
 400:	20 0d       	add	r18, r0
 402:	31 1d       	adc	r19, r1
 404:	11 24       	eor	r1, r1
 406:	21 32       	cpi	r18, 0x21	; 33
 408:	31 05       	cpc	r19, r1
 40a:	94 f2       	brlt	.-92     	; 0x3b0 <LCD_Write_String+0x20>
		{
			Lcd_Write_Char(STRING[index]);
			index++ ;
		}		
	}
}
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	ff 90       	pop	r15
 416:	ef 90       	pop	r14
 418:	08 95       	ret

0000041a <funa>:
static uint8_t Seconds = 0 ,  Minutes = 0 , Hours = 0 ;
char array[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};

void funa()
{		
	Seconds++ ; 
 41a:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <Seconds>
 41e:	8f 5f       	subi	r24, 0xFF	; 255
 420:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <Seconds>
 424:	08 95       	ret

00000426 <Fun_Exti>:
}
void Fun_Exti()
{
	Seconds = 0 ,  Minutes = 0 , Hours = 0 ;
 426:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <Seconds>
 42a:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <Minutes>
 42e:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <Hours>
 432:	08 95       	ret

00000434 <main>:
}

int main()
{
	uint8_t key_scan = 0 , SBuffer = 0 , flag = 0 , MBuffer = 0 , HBuffer = 0 ; 
	DIO_Write_Port_Dir(PORT_C,OUT) ;
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_Write_Port_Dir>
	DIO_Write_Port_Dir(PORT_D,OUT) ;
 43c:	61 e0       	ldi	r22, 0x01	; 1
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_Write_Port_Dir>
	DIO_Write_Pin_Dir(PORT_D,PIN3,IN);
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	63 e0       	ldi	r22, 0x03	; 3
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <DIO_Write_Pin_Dir>
	DIO_Write_Pin(PORT_D,PIN3,HIGH) ;
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	63 e0       	ldi	r22, 0x03	; 3
 452:	83 e0       	ldi	r24, 0x03	; 3
 454:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <DIO_Write_Pin>
	LCD_Init();
 458:	0e 94 34 01 	call	0x268	; 0x268 <LCD_Init>
	KeYPad_Init();
 45c:	0e 94 49 00 	call	0x92	; 0x92 <KeYPad_Init>
	Timer1_voidInit();
 460:	0e 94 bc 06 	call	0xd78	; 0xd78 <Timer1_voidInit>
	EXTI_Enable(EX_INT1) ; 
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	0e 94 7d 05 	call	0xafa	; 0xafa <EXTI_Enable>
	EXI_SetCallBack(EX_INT1,Fun_Exti) ;
 46a:	63 e1       	ldi	r22, 0x13	; 19
 46c:	72 e0       	ldi	r23, 0x02	; 2
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	0e 94 68 05 	call	0xad0	; 0xad0 <EXI_SetCallBack>
	EXTI_TriggerEdge(EX_INT1,RISING_EDGE) ;  
 474:	63 e0       	ldi	r22, 0x03	; 3
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	0e 94 8f 05 	call	0xb1e	; 0xb1e <EXTI_TriggerEdge>
	sei();
 47c:	78 94       	sei
	Timer1_voidOCAEnableInterrupt();
 47e:	0e 94 f0 06 	call	0xde0	; 0xde0 <Timer1_voidOCAEnableInterrupt>
	Timer1_voidOCASetCallBack(funa);
 482:	8d e0       	ldi	r24, 0x0D	; 13
 484:	92 e0       	ldi	r25, 0x02	; 2
 486:	0e 94 f4 06 	call	0xde8	; 0xde8 <Timer1_voidOCASetCallBack>
	Timer1_voidPreload(0);
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 e7 06 	call	0xdce	; 0xdce <Timer1_voidPreload>
	Timer1_voidSetCounterTOP(46875);
 492:	8b e1       	ldi	r24, 0x1B	; 27
 494:	97 eb       	ldi	r25, 0xB7	; 183
 496:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <Timer1_voidSetCounterTOP>
	LCD_Write_String((uint8_t*)"Set Time Enter 1",0,0);
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	8a e6       	ldi	r24, 0x6A	; 106
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_Write_String>
	while(1)
	{
		key_scan = KeyPAd_Scan();
 4a6:	0e 94 4e 00 	call	0x9c	; 0x9c <KeyPAd_Scan>
		if (key_scan!='+' && key_scan!='/' && key_scan!='-' && key_scan!='='&&key_scan != 'a')
 4aa:	8b 32       	cpi	r24, 0x2B	; 43
 4ac:	e1 f3       	breq	.-8      	; 0x4a6 <main+0x72>
 4ae:	8f 32       	cpi	r24, 0x2F	; 47
 4b0:	d1 f3       	breq	.-12     	; 0x4a6 <main+0x72>
 4b2:	8d 32       	cpi	r24, 0x2D	; 45
 4b4:	c1 f3       	breq	.-16     	; 0x4a6 <main+0x72>
 4b6:	8d 33       	cpi	r24, 0x3D	; 61
 4b8:	b1 f3       	breq	.-20     	; 0x4a6 <main+0x72>
 4ba:	81 36       	cpi	r24, 0x61	; 97
 4bc:	a1 f3       	breq	.-24     	; 0x4a6 <main+0x72>
		{
			break ;
		}
	}
	if (key_scan!='1')
 4be:	81 33       	cpi	r24, 0x31	; 49
 4c0:	31 f0       	breq	.+12     	; 0x4ce <main+0x9a>
	{
		Seconds = 0 ;
 4c2:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <Seconds>
		Minutes = 0 ;
 4c6:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <Minutes>
		Hours   = 0 ;
 4ca:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <Hours>
	}
	while(1)
	{
		if (key_scan=='1')
 4ce:	81 33       	cpi	r24, 0x31	; 49
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <main+0xa0>
 4d2:	ae c0       	rjmp	.+348    	; 0x630 <main+0x1fc>
		{
			LCD_Clear_Screen();
 4d4:	0e 94 30 01 	call	0x260	; 0x260 <LCD_Clear_Screen>
			LCD_Write_String((uint8_t*)"Enter Seconds : ",0,0) ;
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	8b e7       	ldi	r24, 0x7B	; 123
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_Write_String>
 4e4:	10 e0       	ldi	r17, 0x00	; 0
 4e6:	01 c0       	rjmp	.+2      	; 0x4ea <main+0xb6>
			while(1)
			{
				key_scan = KeyPAd_Scan();
				if (key_scan!='+' && key_scan!='/' && key_scan!='-' && key_scan!='='&&key_scan != 'a')
				{
					flag++ ;
 4e8:	1d 2f       	mov	r17, r29
		{
			LCD_Clear_Screen();
			LCD_Write_String((uint8_t*)"Enter Seconds : ",0,0) ;
			while(1)
			{
				key_scan = KeyPAd_Scan();
 4ea:	0e 94 4e 00 	call	0x9c	; 0x9c <KeyPAd_Scan>
 4ee:	c8 2f       	mov	r28, r24
				if (key_scan!='+' && key_scan!='/' && key_scan!='-' && key_scan!='='&&key_scan != 'a')
 4f0:	8b 32       	cpi	r24, 0x2B	; 43
 4f2:	d9 f3       	breq	.-10     	; 0x4ea <main+0xb6>
 4f4:	8f 32       	cpi	r24, 0x2F	; 47
 4f6:	c9 f3       	breq	.-14     	; 0x4ea <main+0xb6>
 4f8:	8d 32       	cpi	r24, 0x2D	; 45
 4fa:	b9 f3       	breq	.-18     	; 0x4ea <main+0xb6>
 4fc:	8d 33       	cpi	r24, 0x3D	; 61
 4fe:	a9 f3       	breq	.-22     	; 0x4ea <main+0xb6>
 500:	81 36       	cpi	r24, 0x61	; 97
 502:	99 f3       	breq	.-26     	; 0x4ea <main+0xb6>
				{
					flag++ ;
 504:	d1 e0       	ldi	r29, 0x01	; 1
 506:	d1 0f       	add	r29, r17
					LCD_GO_TO_INDEX(1,flag-1);
 508:	61 2f       	mov	r22, r17
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_GO_TO_INDEX>
					Lcd_Write_Char(key_scan);
 510:	8c 2f       	mov	r24, r28
 512:	0e 94 94 01 	call	0x328	; 0x328 <Lcd_Write_Char>
				
					if (flag==1)
 516:	d1 30       	cpi	r29, 0x01	; 1
 518:	49 f4       	brne	.+18     	; 0x52c <main+0xf8>
					{
						Seconds  = key_scan-48 ;
 51a:	80 ed       	ldi	r24, 0xD0	; 208
 51c:	8c 0f       	add	r24, r28
						Seconds*=10;					
 51e:	88 0f       	add	r24, r24
 520:	98 2f       	mov	r25, r24
 522:	99 0f       	add	r25, r25
 524:	99 0f       	add	r25, r25
 526:	89 0f       	add	r24, r25
 528:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <Seconds>
					}
					SBuffer = (Seconds+(key_scan-48)) ;
 52c:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <Seconds>
 530:	c8 0f       	add	r28, r24
 532:	10 ed       	ldi	r17, 0xD0	; 208
 534:	1c 0f       	add	r17, r28
					if (flag==2)
 536:	d2 30       	cpi	r29, 0x02	; 2
 538:	b9 f6       	brne	.-82     	; 0x4e8 <main+0xb4>
						flag=0;
						break;	
					}
				}
			}
			LCD_Clear_Screen();
 53a:	0e 94 30 01 	call	0x260	; 0x260 <LCD_Clear_Screen>
			LCD_Write_String((uint8_t*)"Enter Minutes : ",0,0) ;
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	8c e8       	ldi	r24, 0x8C	; 140
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_Write_String>
						Seconds*=10;					
					}
					SBuffer = (Seconds+(key_scan-48)) ;
					if (flag==2)
					{
						flag=0;
 54a:	00 e0       	ldi	r16, 0x00	; 0
 54c:	01 c0       	rjmp	.+2      	; 0x550 <main+0x11c>
			while(1)
			{
				key_scan = KeyPAd_Scan();
				if (key_scan!='+'&&key_scan!='/'&&key_scan!='-'&&key_scan!='='&&key_scan != 'a')
				{
					flag++ ;
 54e:	0c 2f       	mov	r16, r28
			}
			LCD_Clear_Screen();
			LCD_Write_String((uint8_t*)"Enter Minutes : ",0,0) ;
			while(1)
			{
				key_scan = KeyPAd_Scan();
 550:	0e 94 4e 00 	call	0x9c	; 0x9c <KeyPAd_Scan>
 554:	d8 2f       	mov	r29, r24
				if (key_scan!='+'&&key_scan!='/'&&key_scan!='-'&&key_scan!='='&&key_scan != 'a')
 556:	8b 32       	cpi	r24, 0x2B	; 43
 558:	d9 f3       	breq	.-10     	; 0x550 <main+0x11c>
 55a:	8f 32       	cpi	r24, 0x2F	; 47
 55c:	c9 f3       	breq	.-14     	; 0x550 <main+0x11c>
 55e:	8d 32       	cpi	r24, 0x2D	; 45
 560:	b9 f3       	breq	.-18     	; 0x550 <main+0x11c>
 562:	8d 33       	cpi	r24, 0x3D	; 61
 564:	a9 f3       	breq	.-22     	; 0x550 <main+0x11c>
 566:	81 36       	cpi	r24, 0x61	; 97
 568:	99 f3       	breq	.-26     	; 0x550 <main+0x11c>
				{
					flag++ ;
 56a:	c1 e0       	ldi	r28, 0x01	; 1
 56c:	c0 0f       	add	r28, r16
					LCD_GO_TO_INDEX(1,flag-1);
 56e:	60 2f       	mov	r22, r16
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_GO_TO_INDEX>
					Lcd_Write_Char(key_scan);
 576:	8d 2f       	mov	r24, r29
 578:	0e 94 94 01 	call	0x328	; 0x328 <Lcd_Write_Char>
			
					if (flag==1)
 57c:	c1 30       	cpi	r28, 0x01	; 1
 57e:	69 f4       	brne	.+26     	; 0x59a <main+0x166>
					{
						LCD_GO_TO_INDEX(1,flag-1);
 580:	60 2f       	mov	r22, r16
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_GO_TO_INDEX>
						Minutes  = key_scan-48 ;
 588:	80 ed       	ldi	r24, 0xD0	; 208
 58a:	8d 0f       	add	r24, r29
						Minutes*=10;
 58c:	88 0f       	add	r24, r24
 58e:	98 2f       	mov	r25, r24
 590:	99 0f       	add	r25, r25
 592:	99 0f       	add	r25, r25
 594:	89 0f       	add	r24, r25
 596:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <Minutes>
					}
					MBuffer = (Minutes+(key_scan-48)) ;
 59a:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <Minutes>
 59e:	d8 0f       	add	r29, r24
 5a0:	d0 53       	subi	r29, 0x30	; 48
					if (flag==2)
 5a2:	c2 30       	cpi	r28, 0x02	; 2
 5a4:	a1 f6       	brne	.-88     	; 0x54e <main+0x11a>
						flag=0;
						break;
					}
				}
			}
			LCD_Clear_Screen();
 5a6:	0e 94 30 01 	call	0x260	; 0x260 <LCD_Clear_Screen>
			LCD_Write_String((uint8_t*)"Enter Hours : ",0,0) ;
 5aa:	40 e0       	ldi	r20, 0x00	; 0
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	8d e9       	ldi	r24, 0x9D	; 157
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_Write_String>
						Minutes*=10;
					}
					MBuffer = (Minutes+(key_scan-48)) ;
					if (flag==2)
					{
						flag=0;
 5b6:	f1 2c       	mov	r15, r1
 5b8:	01 c0       	rjmp	.+2      	; 0x5bc <main+0x188>
			while(1)
			{
				key_scan = KeyPAd_Scan();
				if (key_scan!='+'&&key_scan!='/'&&key_scan!='-'&&key_scan!='='&&key_scan != 'a')
				{
					flag++ ;
 5ba:	f0 2e       	mov	r15, r16
			}
			LCD_Clear_Screen();
			LCD_Write_String((uint8_t*)"Enter Hours : ",0,0) ;
			while(1)
			{
				key_scan = KeyPAd_Scan();
 5bc:	0e 94 4e 00 	call	0x9c	; 0x9c <KeyPAd_Scan>
 5c0:	c8 2f       	mov	r28, r24
				if (key_scan!='+'&&key_scan!='/'&&key_scan!='-'&&key_scan!='='&&key_scan != 'a')
 5c2:	8b 32       	cpi	r24, 0x2B	; 43
 5c4:	d9 f3       	breq	.-10     	; 0x5bc <main+0x188>
 5c6:	8f 32       	cpi	r24, 0x2F	; 47
 5c8:	c9 f3       	breq	.-14     	; 0x5bc <main+0x188>
 5ca:	8d 32       	cpi	r24, 0x2D	; 45
 5cc:	b9 f3       	breq	.-18     	; 0x5bc <main+0x188>
 5ce:	8d 33       	cpi	r24, 0x3D	; 61
 5d0:	a9 f3       	breq	.-22     	; 0x5bc <main+0x188>
 5d2:	81 36       	cpi	r24, 0x61	; 97
 5d4:	99 f3       	breq	.-26     	; 0x5bc <main+0x188>
				{
					flag++ ;
 5d6:	01 e0       	ldi	r16, 0x01	; 1
 5d8:	0f 0d       	add	r16, r15
					LCD_GO_TO_INDEX(1,flag-1);
 5da:	6f 2d       	mov	r22, r15
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_GO_TO_INDEX>
					Lcd_Write_Char(key_scan);
 5e2:	8c 2f       	mov	r24, r28
 5e4:	0e 94 94 01 	call	0x328	; 0x328 <Lcd_Write_Char>
				
					if (flag==1)
 5e8:	01 30       	cpi	r16, 0x01	; 1
 5ea:	49 f4       	brne	.+18     	; 0x5fe <main+0x1ca>
					{
						Hours  = key_scan-48 ;
 5ec:	80 ed       	ldi	r24, 0xD0	; 208
 5ee:	8c 0f       	add	r24, r28
						Hours*=10;
 5f0:	88 0f       	add	r24, r24
 5f2:	98 2f       	mov	r25, r24
 5f4:	99 0f       	add	r25, r25
 5f6:	99 0f       	add	r25, r25
 5f8:	89 0f       	add	r24, r25
 5fa:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <Hours>
					}
					HBuffer = (Hours+(key_scan-48)) ;
 5fe:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <Hours>
 602:	c8 0f       	add	r28, r24
 604:	c0 53       	subi	r28, 0x30	; 48
					if (flag==2)
 606:	02 30       	cpi	r16, 0x02	; 2
 608:	c1 f6       	brne	.-80     	; 0x5ba <main+0x186>
						flag=0;
						break;
					}
				}
			}
			LCD_Clear_Screen();
 60a:	0e 94 30 01 	call	0x260	; 0x260 <LCD_Clear_Screen>
			LCD_Write_String((uint8_t*)"Time : ",0,0) ;
 60e:	40 e0       	ldi	r20, 0x00	; 0
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	8c ea       	ldi	r24, 0xAC	; 172
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_Write_String>
			key_scan = '0' ; 
			Seconds = SBuffer ;
 61a:	10 93 b7 00 	sts	0x00B7, r17	; 0x8000b7 <Seconds>
			Minutes = MBuffer ;
 61e:	d0 93 b6 00 	sts	0x00B6, r29	; 0x8000b6 <Minutes>
			Hours   = HBuffer ;
 622:	c0 93 b5 00 	sts	0x00B5, r28	; 0x8000b5 <Hours>
			Timer1_voidPreload(0);		
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 e7 06 	call	0xdce	; 0xdce <Timer1_voidPreload>
					}
				}
			}
			LCD_Clear_Screen();
			LCD_Write_String((uint8_t*)"Time : ",0,0) ;
			key_scan = '0' ; 
 62e:	80 e3       	ldi	r24, 0x30	; 48
			Seconds = SBuffer ;
			Minutes = MBuffer ;
			Hours   = HBuffer ;
			Timer1_voidPreload(0);		
		}
		SET_BIT(PORTD,1);
 630:	92 b3       	in	r25, 0x12	; 18
 632:	92 60       	ori	r25, 0x02	; 2
 634:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,2);
 636:	92 b3       	in	r25, 0x12	; 18
 638:	94 60       	ori	r25, 0x04	; 4
 63a:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,4);
 63c:	92 b3       	in	r25, 0x12	; 18
 63e:	90 61       	ori	r25, 0x10	; 16
 640:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,6);
 642:	92 b3       	in	r25, 0x12	; 18
 644:	90 64       	ori	r25, 0x40	; 64
 646:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,7);
 648:	92 b3       	in	r25, 0x12	; 18
 64a:	90 68       	ori	r25, 0x80	; 128
 64c:	92 bb       	out	0x12, r25	; 18
		CLEAR_BIT(PORTD,0);
 64e:	92 b3       	in	r25, 0x12	; 18
 650:	9e 7f       	andi	r25, 0xFE	; 254
 652:	92 bb       	out	0x12, r25	; 18
		PORTC = ~array[(Seconds%10)] ;
 654:	a0 91 b7 00 	lds	r26, 0x00B7	; 0x8000b7 <Seconds>
 658:	ed ec       	ldi	r30, 0xCD	; 205
 65a:	ae 9f       	mul	r26, r30
 65c:	91 2d       	mov	r25, r1
 65e:	11 24       	eor	r1, r1
 660:	96 95       	lsr	r25
 662:	96 95       	lsr	r25
 664:	96 95       	lsr	r25
 666:	99 0f       	add	r25, r25
 668:	29 2f       	mov	r18, r25
 66a:	22 0f       	add	r18, r18
 66c:	22 0f       	add	r18, r18
 66e:	92 0f       	add	r25, r18
 670:	a9 1b       	sub	r26, r25
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	a0 5a       	subi	r26, 0xA0	; 160
 676:	bf 4f       	sbci	r27, 0xFF	; 255
 678:	9c 91       	ld	r25, X
 67a:	90 95       	com	r25
 67c:	95 bb       	out	0x15, r25	; 21
 67e:	af e0       	ldi	r26, 0x0F	; 15
 680:	b7 e2       	ldi	r27, 0x27	; 39
 682:	11 97       	sbiw	r26, 0x01	; 1
 684:	f1 f7       	brne	.-4      	; 0x682 <main+0x24e>
 686:	00 c0       	rjmp	.+0      	; 0x688 <main+0x254>
 688:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTD,0);
 68a:	92 b3       	in	r25, 0x12	; 18
 68c:	91 60       	ori	r25, 0x01	; 1
 68e:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,2);
 690:	92 b3       	in	r25, 0x12	; 18
 692:	94 60       	ori	r25, 0x04	; 4
 694:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,4);
 696:	92 b3       	in	r25, 0x12	; 18
 698:	90 61       	ori	r25, 0x10	; 16
 69a:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,6);
 69c:	92 b3       	in	r25, 0x12	; 18
 69e:	90 64       	ori	r25, 0x40	; 64
 6a0:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,7);
 6a2:	92 b3       	in	r25, 0x12	; 18
 6a4:	90 68       	ori	r25, 0x80	; 128
 6a6:	92 bb       	out	0x12, r25	; 18
		CLEAR_BIT(PORTD,1);
 6a8:	92 b3       	in	r25, 0x12	; 18
 6aa:	9d 7f       	andi	r25, 0xFD	; 253
 6ac:	92 bb       	out	0x12, r25	; 18
		PORTC = ~array[(Seconds/10)] ;
 6ae:	a0 91 b7 00 	lds	r26, 0x00B7	; 0x8000b7 <Seconds>
 6b2:	ae 9f       	mul	r26, r30
 6b4:	a1 2d       	mov	r26, r1
 6b6:	11 24       	eor	r1, r1
 6b8:	a6 95       	lsr	r26
 6ba:	a6 95       	lsr	r26
 6bc:	a6 95       	lsr	r26
 6be:	b0 e0       	ldi	r27, 0x00	; 0
 6c0:	a0 5a       	subi	r26, 0xA0	; 160
 6c2:	bf 4f       	sbci	r27, 0xFF	; 255
 6c4:	9c 91       	ld	r25, X
 6c6:	90 95       	com	r25
 6c8:	95 bb       	out	0x15, r25	; 21
 6ca:	af e0       	ldi	r26, 0x0F	; 15
 6cc:	b7 e2       	ldi	r27, 0x27	; 39
 6ce:	11 97       	sbiw	r26, 0x01	; 1
 6d0:	f1 f7       	brne	.-4      	; 0x6ce <main+0x29a>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <main+0x2a0>
 6d4:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTD,1);
 6d6:	92 b3       	in	r25, 0x12	; 18
 6d8:	92 60       	ori	r25, 0x02	; 2
 6da:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,0);
 6dc:	92 b3       	in	r25, 0x12	; 18
 6de:	91 60       	ori	r25, 0x01	; 1
 6e0:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,4);
 6e2:	92 b3       	in	r25, 0x12	; 18
 6e4:	90 61       	ori	r25, 0x10	; 16
 6e6:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,6);
 6e8:	92 b3       	in	r25, 0x12	; 18
 6ea:	90 64       	ori	r25, 0x40	; 64
 6ec:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,7);
 6ee:	92 b3       	in	r25, 0x12	; 18
 6f0:	90 68       	ori	r25, 0x80	; 128
 6f2:	92 bb       	out	0x12, r25	; 18
		CLEAR_BIT(PORTD,2);
 6f4:	92 b3       	in	r25, 0x12	; 18
 6f6:	9b 7f       	andi	r25, 0xFB	; 251
 6f8:	92 bb       	out	0x12, r25	; 18
		PORTC = ~array[(Minutes%10)] ;
 6fa:	a0 91 b6 00 	lds	r26, 0x00B6	; 0x8000b6 <Minutes>
 6fe:	ae 9f       	mul	r26, r30
 700:	91 2d       	mov	r25, r1
 702:	11 24       	eor	r1, r1
 704:	96 95       	lsr	r25
 706:	96 95       	lsr	r25
 708:	96 95       	lsr	r25
 70a:	99 0f       	add	r25, r25
 70c:	29 2f       	mov	r18, r25
 70e:	22 0f       	add	r18, r18
 710:	22 0f       	add	r18, r18
 712:	92 0f       	add	r25, r18
 714:	a9 1b       	sub	r26, r25
 716:	b0 e0       	ldi	r27, 0x00	; 0
 718:	a0 5a       	subi	r26, 0xA0	; 160
 71a:	bf 4f       	sbci	r27, 0xFF	; 255
 71c:	9c 91       	ld	r25, X
 71e:	90 95       	com	r25
 720:	95 bb       	out	0x15, r25	; 21
 722:	af e0       	ldi	r26, 0x0F	; 15
 724:	b7 e2       	ldi	r27, 0x27	; 39
 726:	11 97       	sbiw	r26, 0x01	; 1
 728:	f1 f7       	brne	.-4      	; 0x726 <main+0x2f2>
 72a:	00 c0       	rjmp	.+0      	; 0x72c <main+0x2f8>
 72c:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTD,1);
 72e:	92 b3       	in	r25, 0x12	; 18
 730:	92 60       	ori	r25, 0x02	; 2
 732:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,2);
 734:	92 b3       	in	r25, 0x12	; 18
 736:	94 60       	ori	r25, 0x04	; 4
 738:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,0);
 73a:	92 b3       	in	r25, 0x12	; 18
 73c:	91 60       	ori	r25, 0x01	; 1
 73e:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,6);
 740:	92 b3       	in	r25, 0x12	; 18
 742:	90 64       	ori	r25, 0x40	; 64
 744:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,7);
 746:	92 b3       	in	r25, 0x12	; 18
 748:	90 68       	ori	r25, 0x80	; 128
 74a:	92 bb       	out	0x12, r25	; 18
		CLEAR_BIT(PORTD,4);
 74c:	92 b3       	in	r25, 0x12	; 18
 74e:	9f 7e       	andi	r25, 0xEF	; 239
 750:	92 bb       	out	0x12, r25	; 18
		PORTC = ~array[(Minutes/10)] ;
 752:	a0 91 b6 00 	lds	r26, 0x00B6	; 0x8000b6 <Minutes>
 756:	ae 9f       	mul	r26, r30
 758:	a1 2d       	mov	r26, r1
 75a:	11 24       	eor	r1, r1
 75c:	a6 95       	lsr	r26
 75e:	a6 95       	lsr	r26
 760:	a6 95       	lsr	r26
 762:	b0 e0       	ldi	r27, 0x00	; 0
 764:	a0 5a       	subi	r26, 0xA0	; 160
 766:	bf 4f       	sbci	r27, 0xFF	; 255
 768:	9c 91       	ld	r25, X
 76a:	90 95       	com	r25
 76c:	95 bb       	out	0x15, r25	; 21
 76e:	af e0       	ldi	r26, 0x0F	; 15
 770:	b7 e2       	ldi	r27, 0x27	; 39
 772:	11 97       	sbiw	r26, 0x01	; 1
 774:	f1 f7       	brne	.-4      	; 0x772 <main+0x33e>
 776:	00 c0       	rjmp	.+0      	; 0x778 <main+0x344>
 778:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTD,1);
 77a:	92 b3       	in	r25, 0x12	; 18
 77c:	92 60       	ori	r25, 0x02	; 2
 77e:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,2);
 780:	92 b3       	in	r25, 0x12	; 18
 782:	94 60       	ori	r25, 0x04	; 4
 784:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,4);
 786:	92 b3       	in	r25, 0x12	; 18
 788:	90 61       	ori	r25, 0x10	; 16
 78a:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,0);
 78c:	92 b3       	in	r25, 0x12	; 18
 78e:	91 60       	ori	r25, 0x01	; 1
 790:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,7);
 792:	92 b3       	in	r25, 0x12	; 18
 794:	90 68       	ori	r25, 0x80	; 128
 796:	92 bb       	out	0x12, r25	; 18
		CLEAR_BIT(PORTD,6);
 798:	92 b3       	in	r25, 0x12	; 18
 79a:	9f 7b       	andi	r25, 0xBF	; 191
 79c:	92 bb       	out	0x12, r25	; 18
		PORTC = ~array[(Hours%10)] ;
 79e:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <Hours>
 7a2:	ae 9f       	mul	r26, r30
 7a4:	91 2d       	mov	r25, r1
 7a6:	11 24       	eor	r1, r1
 7a8:	96 95       	lsr	r25
 7aa:	96 95       	lsr	r25
 7ac:	96 95       	lsr	r25
 7ae:	99 0f       	add	r25, r25
 7b0:	29 2f       	mov	r18, r25
 7b2:	22 0f       	add	r18, r18
 7b4:	22 0f       	add	r18, r18
 7b6:	92 0f       	add	r25, r18
 7b8:	a9 1b       	sub	r26, r25
 7ba:	b0 e0       	ldi	r27, 0x00	; 0
 7bc:	a0 5a       	subi	r26, 0xA0	; 160
 7be:	bf 4f       	sbci	r27, 0xFF	; 255
 7c0:	9c 91       	ld	r25, X
 7c2:	90 95       	com	r25
 7c4:	95 bb       	out	0x15, r25	; 21
 7c6:	af e0       	ldi	r26, 0x0F	; 15
 7c8:	b7 e2       	ldi	r27, 0x27	; 39
 7ca:	11 97       	sbiw	r26, 0x01	; 1
 7cc:	f1 f7       	brne	.-4      	; 0x7ca <main+0x396>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <main+0x39c>
 7d0:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTD,1);
 7d2:	92 b3       	in	r25, 0x12	; 18
 7d4:	92 60       	ori	r25, 0x02	; 2
 7d6:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,2);
 7d8:	92 b3       	in	r25, 0x12	; 18
 7da:	94 60       	ori	r25, 0x04	; 4
 7dc:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,4);
 7de:	92 b3       	in	r25, 0x12	; 18
 7e0:	90 61       	ori	r25, 0x10	; 16
 7e2:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,6);
 7e4:	92 b3       	in	r25, 0x12	; 18
 7e6:	90 64       	ori	r25, 0x40	; 64
 7e8:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,0);
 7ea:	92 b3       	in	r25, 0x12	; 18
 7ec:	91 60       	ori	r25, 0x01	; 1
 7ee:	92 bb       	out	0x12, r25	; 18
		CLEAR_BIT(PORTD,7);
 7f0:	92 b3       	in	r25, 0x12	; 18
 7f2:	9f 77       	andi	r25, 0x7F	; 127
 7f4:	92 bb       	out	0x12, r25	; 18
		PORTC = ~array[(Hours/10)] ;
 7f6:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <Hours>
 7fa:	9e 9f       	mul	r25, r30
 7fc:	e1 2d       	mov	r30, r1
 7fe:	11 24       	eor	r1, r1
 800:	e6 95       	lsr	r30
 802:	e6 95       	lsr	r30
 804:	e6 95       	lsr	r30
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	e0 5a       	subi	r30, 0xA0	; 160
 80a:	ff 4f       	sbci	r31, 0xFF	; 255
 80c:	90 81       	ld	r25, Z
 80e:	90 95       	com	r25
 810:	95 bb       	out	0x15, r25	; 21
 812:	ef e0       	ldi	r30, 0x0F	; 15
 814:	f7 e2       	ldi	r31, 0x27	; 39
 816:	31 97       	sbiw	r30, 0x01	; 1
 818:	f1 f7       	brne	.-4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 81a:	00 c0       	rjmp	.+0      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 81c:	00 00       	nop
		_delay_ms(5);
		if (Seconds==60)
 81e:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <Seconds>
 822:	9c 33       	cpi	r25, 0x3C	; 60
 824:	39 f4       	brne	.+14     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
		{
			Seconds=0;
 826:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <Seconds>
			Minutes++;
 82a:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <Minutes>
 82e:	9f 5f       	subi	r25, 0xFF	; 255
 830:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <Minutes>
		}
		if (Minutes==60)
 834:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <Minutes>
 838:	9c 33       	cpi	r25, 0x3C	; 60
 83a:	39 f4       	brne	.+14     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
		{
			Minutes=0;
 83c:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <Minutes>
			Hours++;
 840:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <Hours>
 844:	9f 5f       	subi	r25, 0xFF	; 255
 846:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <Hours>
		}
		if (Hours==24)
 84a:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <Hours>
 84e:	98 31       	cpi	r25, 0x18	; 24
 850:	09 f0       	breq	.+2      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 852:	3d ce       	rjmp	.-902    	; 0x4ce <main+0x9a>
		{
			Hours=0;
 854:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <Hours>
 858:	3a ce       	rjmp	.-908    	; 0x4ce <main+0x9a>

0000085a <__vector_16>:
	ENABLE_ADC_INTERRUPT ; 							 
	
	return Local_ErrorState ;
}
ISR(ADC_vect)
{
 85a:	1f 92       	push	r1
 85c:	0f 92       	push	r0
 85e:	0f b6       	in	r0, 0x3f	; 63
 860:	0f 92       	push	r0
 862:	11 24       	eor	r1, r1
 864:	2f 93       	push	r18
 866:	3f 93       	push	r19
 868:	4f 93       	push	r20
 86a:	5f 93       	push	r21
 86c:	6f 93       	push	r22
 86e:	7f 93       	push	r23
 870:	8f 93       	push	r24
 872:	9f 93       	push	r25
 874:	af 93       	push	r26
 876:	bf 93       	push	r27
 878:	ef 93       	push	r30
 87a:	ff 93       	push	r31
	if (ADC_GptrFun != NULL)
 87c:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <ADC_GptrFun>
 880:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <ADC_GptrFun+0x1>
 884:	30 97       	sbiw	r30, 0x00	; 0
 886:	29 f0       	breq	.+10     	; 0x892 <__stack+0x33>
	{
		ADC_GptrFun(ADCGptrParameter) ; 
 888:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <ADCGptrParameter>
 88c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <ADCGptrParameter+0x1>
 890:	09 95       	icall
	}
 892:	ff 91       	pop	r31
 894:	ef 91       	pop	r30
 896:	bf 91       	pop	r27
 898:	af 91       	pop	r26
 89a:	9f 91       	pop	r25
 89c:	8f 91       	pop	r24
 89e:	7f 91       	pop	r23
 8a0:	6f 91       	pop	r22
 8a2:	5f 91       	pop	r21
 8a4:	4f 91       	pop	r20
 8a6:	3f 91       	pop	r19
 8a8:	2f 91       	pop	r18
 8aa:	0f 90       	pop	r0
 8ac:	0f be       	out	0x3f, r0	; 63
 8ae:	0f 90       	pop	r0
 8b0:	1f 90       	pop	r1
 8b2:	18 95       	reti

000008b4 <DIO_Write_Pin_Dir>:
 */ 

#include "DIO.h"
void DIO_Write_Pin_Dir( GPIO_PORT_t PortNumber , GPIO_PIN_t PinNumber , uint8_t Direction ) 
{
	switch( PortNumber )
 8b4:	81 30       	cpi	r24, 0x01	; 1
 8b6:	11 f1       	breq	.+68     	; 0x8fc <DIO_Write_Pin_Dir+0x48>
 8b8:	30 f0       	brcs	.+12     	; 0x8c6 <DIO_Write_Pin_Dir+0x12>
 8ba:	82 30       	cpi	r24, 0x02	; 2
 8bc:	d1 f1       	breq	.+116    	; 0x932 <DIO_Write_Pin_Dir+0x7e>
 8be:	83 30       	cpi	r24, 0x03	; 3
 8c0:	09 f4       	brne	.+2      	; 0x8c4 <DIO_Write_Pin_Dir+0x10>
 8c2:	52 c0       	rjmp	.+164    	; 0x968 <DIO_Write_Pin_Dir+0xb4>
 8c4:	08 95       	ret
	{
		case PORT_A :
		if ( Direction == OUT )
 8c6:	41 30       	cpi	r20, 0x01	; 1
 8c8:	59 f4       	brne	.+22     	; 0x8e0 <DIO_Write_Pin_Dir+0x2c>
		{
			DDRA |= (1<<PinNumber) ;
 8ca:	2a b3       	in	r18, 0x1a	; 26
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <DIO_Write_Pin_Dir+0x22>
 8d2:	88 0f       	add	r24, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	6a 95       	dec	r22
 8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <DIO_Write_Pin_Dir+0x1e>
 8da:	82 2b       	or	r24, r18
 8dc:	8a bb       	out	0x1a, r24	; 26
 8de:	08 95       	ret
		}
		else if ( Direction == IN )
 8e0:	41 11       	cpse	r20, r1
 8e2:	5c c0       	rjmp	.+184    	; 0x99c <DIO_Write_Pin_Dir+0xe8>
		{
			DDRA &= ~(1<<PinNumber) ;
 8e4:	2a b3       	in	r18, 0x1a	; 26
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <DIO_Write_Pin_Dir+0x3c>
 8ec:	88 0f       	add	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	6a 95       	dec	r22
 8f2:	e2 f7       	brpl	.-8      	; 0x8ec <DIO_Write_Pin_Dir+0x38>
 8f4:	80 95       	com	r24
 8f6:	82 23       	and	r24, r18
 8f8:	8a bb       	out	0x1a, r24	; 26
 8fa:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_B :
		if ( Direction == OUT )
 8fc:	41 30       	cpi	r20, 0x01	; 1
 8fe:	59 f4       	brne	.+22     	; 0x916 <DIO_Write_Pin_Dir+0x62>
		{
			DDRB |= (1<<PinNumber) ;
 900:	27 b3       	in	r18, 0x17	; 23
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	02 c0       	rjmp	.+4      	; 0x90c <DIO_Write_Pin_Dir+0x58>
 908:	88 0f       	add	r24, r24
 90a:	99 1f       	adc	r25, r25
 90c:	6a 95       	dec	r22
 90e:	e2 f7       	brpl	.-8      	; 0x908 <DIO_Write_Pin_Dir+0x54>
 910:	82 2b       	or	r24, r18
 912:	87 bb       	out	0x17, r24	; 23
 914:	08 95       	ret
		}
		else if ( Direction == IN )
 916:	41 11       	cpse	r20, r1
 918:	41 c0       	rjmp	.+130    	; 0x99c <DIO_Write_Pin_Dir+0xe8>
		{
			DDRB &= ~(1<<PinNumber) ;
 91a:	27 b3       	in	r18, 0x17	; 23
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	02 c0       	rjmp	.+4      	; 0x926 <DIO_Write_Pin_Dir+0x72>
 922:	88 0f       	add	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	6a 95       	dec	r22
 928:	e2 f7       	brpl	.-8      	; 0x922 <DIO_Write_Pin_Dir+0x6e>
 92a:	80 95       	com	r24
 92c:	82 23       	and	r24, r18
 92e:	87 bb       	out	0x17, r24	; 23
 930:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_C :
		if ( Direction == OUT )
 932:	41 30       	cpi	r20, 0x01	; 1
 934:	59 f4       	brne	.+22     	; 0x94c <DIO_Write_Pin_Dir+0x98>
		{
			DDRC |= (1<<PinNumber) ;
 936:	24 b3       	in	r18, 0x14	; 20
 938:	81 e0       	ldi	r24, 0x01	; 1
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	02 c0       	rjmp	.+4      	; 0x942 <DIO_Write_Pin_Dir+0x8e>
 93e:	88 0f       	add	r24, r24
 940:	99 1f       	adc	r25, r25
 942:	6a 95       	dec	r22
 944:	e2 f7       	brpl	.-8      	; 0x93e <DIO_Write_Pin_Dir+0x8a>
 946:	82 2b       	or	r24, r18
 948:	84 bb       	out	0x14, r24	; 20
 94a:	08 95       	ret
		}
		else if ( Direction == IN )
 94c:	41 11       	cpse	r20, r1
 94e:	26 c0       	rjmp	.+76     	; 0x99c <DIO_Write_Pin_Dir+0xe8>
		{
			DDRC &= ~(1<<PinNumber) ;
 950:	24 b3       	in	r18, 0x14	; 20
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	02 c0       	rjmp	.+4      	; 0x95c <DIO_Write_Pin_Dir+0xa8>
 958:	88 0f       	add	r24, r24
 95a:	99 1f       	adc	r25, r25
 95c:	6a 95       	dec	r22
 95e:	e2 f7       	brpl	.-8      	; 0x958 <DIO_Write_Pin_Dir+0xa4>
 960:	80 95       	com	r24
 962:	82 23       	and	r24, r18
 964:	84 bb       	out	0x14, r24	; 20
 966:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_D :
		if ( Direction == OUT )
 968:	41 30       	cpi	r20, 0x01	; 1
 96a:	59 f4       	brne	.+22     	; 0x982 <DIO_Write_Pin_Dir+0xce>
		{
			DDRD |= (1<<PinNumber) ;
 96c:	21 b3       	in	r18, 0x11	; 17
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	02 c0       	rjmp	.+4      	; 0x978 <DIO_Write_Pin_Dir+0xc4>
 974:	88 0f       	add	r24, r24
 976:	99 1f       	adc	r25, r25
 978:	6a 95       	dec	r22
 97a:	e2 f7       	brpl	.-8      	; 0x974 <DIO_Write_Pin_Dir+0xc0>
 97c:	82 2b       	or	r24, r18
 97e:	81 bb       	out	0x11, r24	; 17
 980:	08 95       	ret
		}
		else if ( Direction == IN )
 982:	41 11       	cpse	r20, r1
 984:	0b c0       	rjmp	.+22     	; 0x99c <DIO_Write_Pin_Dir+0xe8>
		{
			DDRD &= ~(1<<PinNumber) ;
 986:	21 b3       	in	r18, 0x11	; 17
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	02 c0       	rjmp	.+4      	; 0x992 <DIO_Write_Pin_Dir+0xde>
 98e:	88 0f       	add	r24, r24
 990:	99 1f       	adc	r25, r25
 992:	6a 95       	dec	r22
 994:	e2 f7       	brpl	.-8      	; 0x98e <DIO_Write_Pin_Dir+0xda>
 996:	80 95       	com	r24
 998:	82 23       	and	r24, r18
 99a:	81 bb       	out	0x11, r24	; 17
 99c:	08 95       	ret

0000099e <DIO_Write_Port_Dir>:
		break ;
	}
}
void DIO_Write_Port_Dir( GPIO_PORT_t PortNumber , uint8_t Direction ) 
{
	switch(PortNumber)
 99e:	81 30       	cpi	r24, 0x01	; 1
 9a0:	69 f0       	breq	.+26     	; 0x9bc <DIO_Write_Port_Dir+0x1e>
 9a2:	28 f0       	brcs	.+10     	; 0x9ae <DIO_Write_Port_Dir+0x10>
 9a4:	82 30       	cpi	r24, 0x02	; 2
 9a6:	89 f0       	breq	.+34     	; 0x9ca <DIO_Write_Port_Dir+0x2c>
 9a8:	83 30       	cpi	r24, 0x03	; 3
 9aa:	b1 f0       	breq	.+44     	; 0x9d8 <DIO_Write_Port_Dir+0x3a>
 9ac:	08 95       	ret
	{
		case PORT_A : 
			if(Direction==OUT)
 9ae:	61 30       	cpi	r22, 0x01	; 1
 9b0:	19 f4       	brne	.+6      	; 0x9b8 <DIO_Write_Port_Dir+0x1a>
			{
				DDRA = 0XFF ;
 9b2:	8f ef       	ldi	r24, 0xFF	; 255
 9b4:	8a bb       	out	0x1a, r24	; 26
 9b6:	08 95       	ret
			}
			else
			{
				DDRA = 0X00 ;
 9b8:	1a ba       	out	0x1a, r1	; 26
 9ba:	08 95       	ret
			}
		break ;
		case PORT_B :
			if(Direction==OUT)
 9bc:	61 30       	cpi	r22, 0x01	; 1
 9be:	19 f4       	brne	.+6      	; 0x9c6 <DIO_Write_Port_Dir+0x28>
			{
				DDRB = 0XFF ;
 9c0:	8f ef       	ldi	r24, 0xFF	; 255
 9c2:	87 bb       	out	0x17, r24	; 23
 9c4:	08 95       	ret
			}
			else
			{
				DDRB = 0X00 ;
 9c6:	17 ba       	out	0x17, r1	; 23
 9c8:	08 95       	ret
			}
			break ;
		case PORT_C :
		if(Direction==OUT)
 9ca:	61 30       	cpi	r22, 0x01	; 1
 9cc:	19 f4       	brne	.+6      	; 0x9d4 <DIO_Write_Port_Dir+0x36>
			{
				DDRC = 0XFF ;
 9ce:	8f ef       	ldi	r24, 0xFF	; 255
 9d0:	84 bb       	out	0x14, r24	; 20
 9d2:	08 95       	ret
			}
			else
			{
				DDRC = 0X00 ;
 9d4:	14 ba       	out	0x14, r1	; 20
 9d6:	08 95       	ret
			}
			break ;
		case PORT_D :
			if(Direction==OUT)
 9d8:	61 30       	cpi	r22, 0x01	; 1
 9da:	19 f4       	brne	.+6      	; 0x9e2 <DIO_Write_Port_Dir+0x44>
			{
				DDRD = 0XFF ;
 9dc:	8f ef       	ldi	r24, 0xFF	; 255
 9de:	81 bb       	out	0x11, r24	; 17
 9e0:	08 95       	ret
			}
			else
			{
				DDRD = 0X00 ;
 9e2:	11 ba       	out	0x11, r1	; 17
 9e4:	08 95       	ret

000009e6 <DIO_Write_Pin>:
	}
}

void DIO_Write_Pin( GPIO_PORT_t PortNumber , GPIO_PIN_t PinNumber , uint8_t value  )
{
	switch( PortNumber )
 9e6:	81 30       	cpi	r24, 0x01	; 1
 9e8:	11 f1       	breq	.+68     	; 0xa2e <DIO_Write_Pin+0x48>
 9ea:	30 f0       	brcs	.+12     	; 0x9f8 <DIO_Write_Pin+0x12>
 9ec:	82 30       	cpi	r24, 0x02	; 2
 9ee:	d1 f1       	breq	.+116    	; 0xa64 <DIO_Write_Pin+0x7e>
 9f0:	83 30       	cpi	r24, 0x03	; 3
 9f2:	09 f4       	brne	.+2      	; 0x9f6 <DIO_Write_Pin+0x10>
 9f4:	52 c0       	rjmp	.+164    	; 0xa9a <DIO_Write_Pin+0xb4>
 9f6:	08 95       	ret
	{
		case PORT_A :
		if ( value == HIGH )
 9f8:	41 30       	cpi	r20, 0x01	; 1
 9fa:	59 f4       	brne	.+22     	; 0xa12 <DIO_Write_Pin+0x2c>
		{
			PORTA |= (1<<PinNumber) ;
 9fc:	2b b3       	in	r18, 0x1b	; 27
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <DIO_Write_Pin+0x22>
 a04:	88 0f       	add	r24, r24
 a06:	99 1f       	adc	r25, r25
 a08:	6a 95       	dec	r22
 a0a:	e2 f7       	brpl	.-8      	; 0xa04 <DIO_Write_Pin+0x1e>
 a0c:	82 2b       	or	r24, r18
 a0e:	8b bb       	out	0x1b, r24	; 27
 a10:	08 95       	ret
		}
		else if ( value == LOW )
 a12:	41 11       	cpse	r20, r1
 a14:	5c c0       	rjmp	.+184    	; 0xace <DIO_Write_Pin+0xe8>
		{
			PORTA &= ~(1<<PinNumber) ;
 a16:	2b b3       	in	r18, 0x1b	; 27
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <DIO_Write_Pin+0x3c>
 a1e:	88 0f       	add	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	6a 95       	dec	r22
 a24:	e2 f7       	brpl	.-8      	; 0xa1e <DIO_Write_Pin+0x38>
 a26:	80 95       	com	r24
 a28:	82 23       	and	r24, r18
 a2a:	8b bb       	out	0x1b, r24	; 27
 a2c:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_B :
		if ( value == HIGH )
 a2e:	41 30       	cpi	r20, 0x01	; 1
 a30:	59 f4       	brne	.+22     	; 0xa48 <DIO_Write_Pin+0x62>
		{
			PORTB |= (1<<PinNumber) ;
 a32:	28 b3       	in	r18, 0x18	; 24
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <DIO_Write_Pin+0x58>
 a3a:	88 0f       	add	r24, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	6a 95       	dec	r22
 a40:	e2 f7       	brpl	.-8      	; 0xa3a <DIO_Write_Pin+0x54>
 a42:	82 2b       	or	r24, r18
 a44:	88 bb       	out	0x18, r24	; 24
 a46:	08 95       	ret
		}
		else if ( value == LOW )
 a48:	41 11       	cpse	r20, r1
 a4a:	41 c0       	rjmp	.+130    	; 0xace <DIO_Write_Pin+0xe8>
		{
			PORTB &= ~(1<<PinNumber) ;
 a4c:	28 b3       	in	r18, 0x18	; 24
 a4e:	81 e0       	ldi	r24, 0x01	; 1
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <DIO_Write_Pin+0x72>
 a54:	88 0f       	add	r24, r24
 a56:	99 1f       	adc	r25, r25
 a58:	6a 95       	dec	r22
 a5a:	e2 f7       	brpl	.-8      	; 0xa54 <DIO_Write_Pin+0x6e>
 a5c:	80 95       	com	r24
 a5e:	82 23       	and	r24, r18
 a60:	88 bb       	out	0x18, r24	; 24
 a62:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_C :
		if ( value == HIGH )
 a64:	41 30       	cpi	r20, 0x01	; 1
 a66:	59 f4       	brne	.+22     	; 0xa7e <DIO_Write_Pin+0x98>
		{
			PORTC |= (1<<PinNumber) ;
 a68:	25 b3       	in	r18, 0x15	; 21
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <DIO_Write_Pin+0x8e>
 a70:	88 0f       	add	r24, r24
 a72:	99 1f       	adc	r25, r25
 a74:	6a 95       	dec	r22
 a76:	e2 f7       	brpl	.-8      	; 0xa70 <DIO_Write_Pin+0x8a>
 a78:	82 2b       	or	r24, r18
 a7a:	85 bb       	out	0x15, r24	; 21
 a7c:	08 95       	ret
		}
		else if ( value == LOW )
 a7e:	41 11       	cpse	r20, r1
 a80:	26 c0       	rjmp	.+76     	; 0xace <DIO_Write_Pin+0xe8>
		{
			PORTC &= ~(1<<PinNumber) ;
 a82:	25 b3       	in	r18, 0x15	; 21
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <DIO_Write_Pin+0xa8>
 a8a:	88 0f       	add	r24, r24
 a8c:	99 1f       	adc	r25, r25
 a8e:	6a 95       	dec	r22
 a90:	e2 f7       	brpl	.-8      	; 0xa8a <DIO_Write_Pin+0xa4>
 a92:	80 95       	com	r24
 a94:	82 23       	and	r24, r18
 a96:	85 bb       	out	0x15, r24	; 21
 a98:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_D :
		if ( value == HIGH )
 a9a:	41 30       	cpi	r20, 0x01	; 1
 a9c:	59 f4       	brne	.+22     	; 0xab4 <DIO_Write_Pin+0xce>
		{
			PORTD |= (1<<PinNumber) ;
 a9e:	22 b3       	in	r18, 0x12	; 18
 aa0:	81 e0       	ldi	r24, 0x01	; 1
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	02 c0       	rjmp	.+4      	; 0xaaa <DIO_Write_Pin+0xc4>
 aa6:	88 0f       	add	r24, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	6a 95       	dec	r22
 aac:	e2 f7       	brpl	.-8      	; 0xaa6 <DIO_Write_Pin+0xc0>
 aae:	82 2b       	or	r24, r18
 ab0:	82 bb       	out	0x12, r24	; 18
 ab2:	08 95       	ret
		}
		else if ( value == LOW )
 ab4:	41 11       	cpse	r20, r1
 ab6:	0b c0       	rjmp	.+22     	; 0xace <DIO_Write_Pin+0xe8>
		{
			PORTD &= ~(1<<PinNumber) ;
 ab8:	22 b3       	in	r18, 0x12	; 18
 aba:	81 e0       	ldi	r24, 0x01	; 1
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <DIO_Write_Pin+0xde>
 ac0:	88 0f       	add	r24, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	6a 95       	dec	r22
 ac6:	e2 f7       	brpl	.-8      	; 0xac0 <DIO_Write_Pin+0xda>
 ac8:	80 95       	com	r24
 aca:	82 23       	and	r24, r18
 acc:	82 bb       	out	0x12, r24	; 18
 ace:	08 95       	ret

00000ad0 <EXI_SetCallBack>:
		break;
		case EX_INT1 :
		CLEAR_BIT(GICR,INT1);
		break;
		case EX_INT2 :
		CLEAR_BIT(GICR,INT2);
 ad0:	81 30       	cpi	r24, 0x01	; 1
 ad2:	49 f0       	breq	.+18     	; 0xae6 <EXI_SetCallBack+0x16>
 ad4:	18 f0       	brcs	.+6      	; 0xadc <EXI_SetCallBack+0xc>
 ad6:	82 30       	cpi	r24, 0x02	; 2
 ad8:	59 f0       	breq	.+22     	; 0xaf0 <EXI_SetCallBack+0x20>
 ada:	08 95       	ret
 adc:	70 93 c1 00 	sts	0x00C1, r23	; 0x8000c1 <INT0_Fptr+0x1>
 ae0:	60 93 c0 00 	sts	0x00C0, r22	; 0x8000c0 <INT0_Fptr>
 ae4:	08 95       	ret
 ae6:	70 93 bf 00 	sts	0x00BF, r23	; 0x8000bf <INT1_Fptr+0x1>
 aea:	60 93 be 00 	sts	0x00BE, r22	; 0x8000be <INT1_Fptr>
 aee:	08 95       	ret
 af0:	70 93 bd 00 	sts	0x00BD, r23	; 0x8000bd <INT2_Fptr+0x1>
 af4:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <INT2_Fptr>
 af8:	08 95       	ret

00000afa <EXTI_Enable>:
 afa:	81 30       	cpi	r24, 0x01	; 1
 afc:	41 f0       	breq	.+16     	; 0xb0e <EXTI_Enable+0x14>
 afe:	18 f0       	brcs	.+6      	; 0xb06 <EXTI_Enable+0xc>
 b00:	82 30       	cpi	r24, 0x02	; 2
 b02:	49 f0       	breq	.+18     	; 0xb16 <EXTI_Enable+0x1c>
 b04:	08 95       	ret
 b06:	8b b7       	in	r24, 0x3b	; 59
 b08:	80 64       	ori	r24, 0x40	; 64
 b0a:	8b bf       	out	0x3b, r24	; 59
 b0c:	08 95       	ret
 b0e:	8b b7       	in	r24, 0x3b	; 59
 b10:	80 68       	ori	r24, 0x80	; 128
 b12:	8b bf       	out	0x3b, r24	; 59
 b14:	08 95       	ret
 b16:	8b b7       	in	r24, 0x3b	; 59
 b18:	80 62       	ori	r24, 0x20	; 32
 b1a:	8b bf       	out	0x3b, r24	; 59
 b1c:	08 95       	ret

00000b1e <EXTI_TriggerEdge>:
	}
	
}
void EXTI_TriggerEdge(EXTI_Interrupt_t interrupt , Trigger_Edge_t Edge)
{
	switch(interrupt)
 b1e:	81 30       	cpi	r24, 0x01	; 1
 b20:	49 f1       	breq	.+82     	; 0xb74 <EXTI_TriggerEdge+0x56>
 b22:	20 f0       	brcs	.+8      	; 0xb2c <EXTI_TriggerEdge+0xe>
 b24:	82 30       	cpi	r24, 0x02	; 2
 b26:	09 f4       	brne	.+2      	; 0xb2a <EXTI_TriggerEdge+0xc>
 b28:	49 c0       	rjmp	.+146    	; 0xbbc <EXTI_TriggerEdge+0x9e>
 b2a:	08 95       	ret
	{
		case EX_INT0 :
			switch(Edge)
 b2c:	61 30       	cpi	r22, 0x01	; 1
 b2e:	69 f0       	breq	.+26     	; 0xb4a <EXTI_TriggerEdge+0x2c>
 b30:	28 f0       	brcs	.+10     	; 0xb3c <EXTI_TriggerEdge+0x1e>
 b32:	62 30       	cpi	r22, 0x02	; 2
 b34:	89 f0       	breq	.+34     	; 0xb58 <EXTI_TriggerEdge+0x3a>
 b36:	63 30       	cpi	r22, 0x03	; 3
 b38:	b1 f0       	breq	.+44     	; 0xb66 <EXTI_TriggerEdge+0x48>
 b3a:	08 95       	ret
			{
				case LOW_LEVEL :
				CLEAR_BIT(MCUCR,ISC00);
 b3c:	85 b7       	in	r24, 0x35	; 53
 b3e:	8e 7f       	andi	r24, 0xFE	; 254
 b40:	85 bf       	out	0x35, r24	; 53
				CLEAR_BIT(MCUCR,ISC01);
 b42:	85 b7       	in	r24, 0x35	; 53
 b44:	8d 7f       	andi	r24, 0xFD	; 253
 b46:	85 bf       	out	0x35, r24	; 53
				break;
 b48:	08 95       	ret
				case ANY_LOGIC_CHANGE :
				SET_BIT(MCUCR,ISC00);
 b4a:	85 b7       	in	r24, 0x35	; 53
 b4c:	81 60       	ori	r24, 0x01	; 1
 b4e:	85 bf       	out	0x35, r24	; 53
				CLEAR_BIT(MCUCR,ISC01);
 b50:	85 b7       	in	r24, 0x35	; 53
 b52:	8d 7f       	andi	r24, 0xFD	; 253
 b54:	85 bf       	out	0x35, r24	; 53
				break;
 b56:	08 95       	ret
				case FALLING_EDGE :
				CLEAR_BIT(MCUCR,ISC00);
 b58:	85 b7       	in	r24, 0x35	; 53
 b5a:	8e 7f       	andi	r24, 0xFE	; 254
 b5c:	85 bf       	out	0x35, r24	; 53
				SET_BIT(MCUCR,ISC01);
 b5e:	85 b7       	in	r24, 0x35	; 53
 b60:	82 60       	ori	r24, 0x02	; 2
 b62:	85 bf       	out	0x35, r24	; 53
				break;
 b64:	08 95       	ret
				case RISING_EDGE :
				SET_BIT(MCUCR,ISC00);
 b66:	85 b7       	in	r24, 0x35	; 53
 b68:	81 60       	ori	r24, 0x01	; 1
 b6a:	85 bf       	out	0x35, r24	; 53
				SET_BIT(MCUCR,ISC01);
 b6c:	85 b7       	in	r24, 0x35	; 53
 b6e:	82 60       	ori	r24, 0x02	; 2
 b70:	85 bf       	out	0x35, r24	; 53
				break;
 b72:	08 95       	ret
			}
			break;
		case EX_INT1 :
			switch(Edge)
 b74:	61 30       	cpi	r22, 0x01	; 1
 b76:	69 f0       	breq	.+26     	; 0xb92 <EXTI_TriggerEdge+0x74>
 b78:	28 f0       	brcs	.+10     	; 0xb84 <EXTI_TriggerEdge+0x66>
 b7a:	62 30       	cpi	r22, 0x02	; 2
 b7c:	89 f0       	breq	.+34     	; 0xba0 <EXTI_TriggerEdge+0x82>
 b7e:	63 30       	cpi	r22, 0x03	; 3
 b80:	b1 f0       	breq	.+44     	; 0xbae <EXTI_TriggerEdge+0x90>
 b82:	08 95       	ret
			{
				case LOW_LEVEL :
				CLEAR_BIT(MCUCR,ISC10);
 b84:	85 b7       	in	r24, 0x35	; 53
 b86:	8b 7f       	andi	r24, 0xFB	; 251
 b88:	85 bf       	out	0x35, r24	; 53
				CLEAR_BIT(MCUCR,ISC11);
 b8a:	85 b7       	in	r24, 0x35	; 53
 b8c:	87 7f       	andi	r24, 0xF7	; 247
 b8e:	85 bf       	out	0x35, r24	; 53
				break;
 b90:	08 95       	ret
				case ANY_LOGIC_CHANGE :
				SET_BIT(MCUCR,ISC10);
 b92:	85 b7       	in	r24, 0x35	; 53
 b94:	84 60       	ori	r24, 0x04	; 4
 b96:	85 bf       	out	0x35, r24	; 53
				CLEAR_BIT(MCUCR,ISC11);
 b98:	85 b7       	in	r24, 0x35	; 53
 b9a:	87 7f       	andi	r24, 0xF7	; 247
 b9c:	85 bf       	out	0x35, r24	; 53
				break;
 b9e:	08 95       	ret
				case FALLING_EDGE :
				CLEAR_BIT(MCUCR,ISC10);
 ba0:	85 b7       	in	r24, 0x35	; 53
 ba2:	8b 7f       	andi	r24, 0xFB	; 251
 ba4:	85 bf       	out	0x35, r24	; 53
				SET_BIT(MCUCR,ISC11);
 ba6:	85 b7       	in	r24, 0x35	; 53
 ba8:	88 60       	ori	r24, 0x08	; 8
 baa:	85 bf       	out	0x35, r24	; 53
				break;
 bac:	08 95       	ret
				case RISING_EDGE :
				SET_BIT(MCUCR,ISC10);
 bae:	85 b7       	in	r24, 0x35	; 53
 bb0:	84 60       	ori	r24, 0x04	; 4
 bb2:	85 bf       	out	0x35, r24	; 53
				SET_BIT(MCUCR,ISC11);
 bb4:	85 b7       	in	r24, 0x35	; 53
 bb6:	88 60       	ori	r24, 0x08	; 8
 bb8:	85 bf       	out	0x35, r24	; 53
				break;
 bba:	08 95       	ret
			}
			break;
		case EX_INT2 :
			switch(Edge)
 bbc:	62 30       	cpi	r22, 0x02	; 2
 bbe:	19 f0       	breq	.+6      	; 0xbc6 <EXTI_TriggerEdge+0xa8>
 bc0:	63 30       	cpi	r22, 0x03	; 3
 bc2:	29 f0       	breq	.+10     	; 0xbce <EXTI_TriggerEdge+0xb0>
 bc4:	08 c0       	rjmp	.+16     	; 0xbd6 <EXTI_TriggerEdge+0xb8>
			{
				case FALLING_EDGE :
					CLEAR_BIT(MCUCSR,ISC2);
 bc6:	84 b7       	in	r24, 0x34	; 52
 bc8:	8f 7b       	andi	r24, 0xBF	; 191
 bca:	84 bf       	out	0x34, r24	; 52
					break;
 bcc:	08 95       	ret
				case RISING_EDGE :
					SET_BIT(MCUCSR,ISC2);
 bce:	84 b7       	in	r24, 0x34	; 52
 bd0:	80 64       	ori	r24, 0x40	; 64
 bd2:	84 bf       	out	0x34, r24	; 52
					break;
 bd4:	08 95       	ret
				default:
					CLEAR_BIT(MCUCSR,ISC2);
 bd6:	84 b7       	in	r24, 0x34	; 52
 bd8:	8f 7b       	andi	r24, 0xBF	; 191
 bda:	84 bf       	out	0x34, r24	; 52
 bdc:	08 95       	ret

00000bde <__vector_1>:
			break;
	}
}
/*******************************ISR********************************/
ISR(INT0_vect)
{
 bde:	1f 92       	push	r1
 be0:	0f 92       	push	r0
 be2:	0f b6       	in	r0, 0x3f	; 63
 be4:	0f 92       	push	r0
 be6:	11 24       	eor	r1, r1
 be8:	2f 93       	push	r18
 bea:	3f 93       	push	r19
 bec:	4f 93       	push	r20
 bee:	5f 93       	push	r21
 bf0:	6f 93       	push	r22
 bf2:	7f 93       	push	r23
 bf4:	8f 93       	push	r24
 bf6:	9f 93       	push	r25
 bf8:	af 93       	push	r26
 bfa:	bf 93       	push	r27
 bfc:	ef 93       	push	r30
 bfe:	ff 93       	push	r31
	if (INT0_Fptr!=NULL)
 c00:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <INT0_Fptr>
 c04:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <INT0_Fptr+0x1>
 c08:	30 97       	sbiw	r30, 0x00	; 0
 c0a:	09 f0       	breq	.+2      	; 0xc0e <__vector_1+0x30>
	{
		INT0_Fptr();
 c0c:	09 95       	icall
	}
}
 c0e:	ff 91       	pop	r31
 c10:	ef 91       	pop	r30
 c12:	bf 91       	pop	r27
 c14:	af 91       	pop	r26
 c16:	9f 91       	pop	r25
 c18:	8f 91       	pop	r24
 c1a:	7f 91       	pop	r23
 c1c:	6f 91       	pop	r22
 c1e:	5f 91       	pop	r21
 c20:	4f 91       	pop	r20
 c22:	3f 91       	pop	r19
 c24:	2f 91       	pop	r18
 c26:	0f 90       	pop	r0
 c28:	0f be       	out	0x3f, r0	; 63
 c2a:	0f 90       	pop	r0
 c2c:	1f 90       	pop	r1
 c2e:	18 95       	reti

00000c30 <__vector_2>:
ISR(INT1_vect)
{
 c30:	1f 92       	push	r1
 c32:	0f 92       	push	r0
 c34:	0f b6       	in	r0, 0x3f	; 63
 c36:	0f 92       	push	r0
 c38:	11 24       	eor	r1, r1
 c3a:	2f 93       	push	r18
 c3c:	3f 93       	push	r19
 c3e:	4f 93       	push	r20
 c40:	5f 93       	push	r21
 c42:	6f 93       	push	r22
 c44:	7f 93       	push	r23
 c46:	8f 93       	push	r24
 c48:	9f 93       	push	r25
 c4a:	af 93       	push	r26
 c4c:	bf 93       	push	r27
 c4e:	ef 93       	push	r30
 c50:	ff 93       	push	r31
	if (INT1_Fptr!=NULL)
 c52:	e0 91 be 00 	lds	r30, 0x00BE	; 0x8000be <INT1_Fptr>
 c56:	f0 91 bf 00 	lds	r31, 0x00BF	; 0x8000bf <INT1_Fptr+0x1>
 c5a:	30 97       	sbiw	r30, 0x00	; 0
 c5c:	09 f0       	breq	.+2      	; 0xc60 <__vector_2+0x30>
	{
		INT1_Fptr();
 c5e:	09 95       	icall
	}
}
 c60:	ff 91       	pop	r31
 c62:	ef 91       	pop	r30
 c64:	bf 91       	pop	r27
 c66:	af 91       	pop	r26
 c68:	9f 91       	pop	r25
 c6a:	8f 91       	pop	r24
 c6c:	7f 91       	pop	r23
 c6e:	6f 91       	pop	r22
 c70:	5f 91       	pop	r21
 c72:	4f 91       	pop	r20
 c74:	3f 91       	pop	r19
 c76:	2f 91       	pop	r18
 c78:	0f 90       	pop	r0
 c7a:	0f be       	out	0x3f, r0	; 63
 c7c:	0f 90       	pop	r0
 c7e:	1f 90       	pop	r1
 c80:	18 95       	reti

00000c82 <__vector_3>:
ISR(INT2_vect)
{
 c82:	1f 92       	push	r1
 c84:	0f 92       	push	r0
 c86:	0f b6       	in	r0, 0x3f	; 63
 c88:	0f 92       	push	r0
 c8a:	11 24       	eor	r1, r1
 c8c:	2f 93       	push	r18
 c8e:	3f 93       	push	r19
 c90:	4f 93       	push	r20
 c92:	5f 93       	push	r21
 c94:	6f 93       	push	r22
 c96:	7f 93       	push	r23
 c98:	8f 93       	push	r24
 c9a:	9f 93       	push	r25
 c9c:	af 93       	push	r26
 c9e:	bf 93       	push	r27
 ca0:	ef 93       	push	r30
 ca2:	ff 93       	push	r31
	if (INT2_Fptr!=NULL)
 ca4:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <INT2_Fptr>
 ca8:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <INT2_Fptr+0x1>
 cac:	30 97       	sbiw	r30, 0x00	; 0
 cae:	09 f0       	breq	.+2      	; 0xcb2 <__vector_3+0x30>
	{
		INT2_Fptr();
 cb0:	09 95       	icall
	}
 cb2:	ff 91       	pop	r31
 cb4:	ef 91       	pop	r30
 cb6:	bf 91       	pop	r27
 cb8:	af 91       	pop	r26
 cba:	9f 91       	pop	r25
 cbc:	8f 91       	pop	r24
 cbe:	7f 91       	pop	r23
 cc0:	6f 91       	pop	r22
 cc2:	5f 91       	pop	r21
 cc4:	4f 91       	pop	r20
 cc6:	3f 91       	pop	r19
 cc8:	2f 91       	pop	r18
 cca:	0f 90       	pop	r0
 ccc:	0f be       	out	0x3f, r0	; 63
 cce:	0f 90       	pop	r0
 cd0:	1f 90       	pop	r1
 cd2:	18 95       	reti

00000cd4 <__vector_10>:
/************************************************************************************/
/*						PRIVATE FUNCTIONS IMPLEMENTATION							*/
/************************************************************************************/

void __vector_10(void)
{
 cd4:	1f 92       	push	r1
 cd6:	0f 92       	push	r0
 cd8:	0f b6       	in	r0, 0x3f	; 63
 cda:	0f 92       	push	r0
 cdc:	11 24       	eor	r1, r1
 cde:	2f 93       	push	r18
 ce0:	3f 93       	push	r19
 ce2:	4f 93       	push	r20
 ce4:	5f 93       	push	r21
 ce6:	6f 93       	push	r22
 ce8:	7f 93       	push	r23
 cea:	8f 93       	push	r24
 cec:	9f 93       	push	r25
 cee:	af 93       	push	r26
 cf0:	bf 93       	push	r27
 cf2:	ef 93       	push	r30
 cf4:	ff 93       	push	r31
	if (GLOB_VidTimer0OCMPtrCallBack != NULL)
 cf6:	e0 91 c2 00 	lds	r30, 0x00C2	; 0x8000c2 <GLOB_VidTimer0OCMPtrCallBack>
 cfa:	f0 91 c3 00 	lds	r31, 0x00C3	; 0x8000c3 <GLOB_VidTimer0OCMPtrCallBack+0x1>
 cfe:	30 97       	sbiw	r30, 0x00	; 0
 d00:	09 f0       	breq	.+2      	; 0xd04 <__vector_10+0x30>
	{
		(*GLOB_VidTimer0OCMPtrCallBack)();
 d02:	09 95       	icall
	}
}
 d04:	ff 91       	pop	r31
 d06:	ef 91       	pop	r30
 d08:	bf 91       	pop	r27
 d0a:	af 91       	pop	r26
 d0c:	9f 91       	pop	r25
 d0e:	8f 91       	pop	r24
 d10:	7f 91       	pop	r23
 d12:	6f 91       	pop	r22
 d14:	5f 91       	pop	r21
 d16:	4f 91       	pop	r20
 d18:	3f 91       	pop	r19
 d1a:	2f 91       	pop	r18
 d1c:	0f 90       	pop	r0
 d1e:	0f be       	out	0x3f, r0	; 63
 d20:	0f 90       	pop	r0
 d22:	1f 90       	pop	r1
 d24:	18 95       	reti

00000d26 <__vector_11>:

void __vector_11(void)
{
 d26:	1f 92       	push	r1
 d28:	0f 92       	push	r0
 d2a:	0f b6       	in	r0, 0x3f	; 63
 d2c:	0f 92       	push	r0
 d2e:	11 24       	eor	r1, r1
 d30:	2f 93       	push	r18
 d32:	3f 93       	push	r19
 d34:	4f 93       	push	r20
 d36:	5f 93       	push	r21
 d38:	6f 93       	push	r22
 d3a:	7f 93       	push	r23
 d3c:	8f 93       	push	r24
 d3e:	9f 93       	push	r25
 d40:	af 93       	push	r26
 d42:	bf 93       	push	r27
 d44:	ef 93       	push	r30
 d46:	ff 93       	push	r31
	if (GLOB_VidTimer0OVFPtrCallBack != NULL)
 d48:	e0 91 c4 00 	lds	r30, 0x00C4	; 0x8000c4 <GLOB_VidTimer0OVFPtrCallBack>
 d4c:	f0 91 c5 00 	lds	r31, 0x00C5	; 0x8000c5 <GLOB_VidTimer0OVFPtrCallBack+0x1>
 d50:	30 97       	sbiw	r30, 0x00	; 0
 d52:	09 f0       	breq	.+2      	; 0xd56 <__vector_11+0x30>
	{
		(*GLOB_VidTimer0OVFPtrCallBack)();
 d54:	09 95       	icall
	}
}
 d56:	ff 91       	pop	r31
 d58:	ef 91       	pop	r30
 d5a:	bf 91       	pop	r27
 d5c:	af 91       	pop	r26
 d5e:	9f 91       	pop	r25
 d60:	8f 91       	pop	r24
 d62:	7f 91       	pop	r23
 d64:	6f 91       	pop	r22
 d66:	5f 91       	pop	r21
 d68:	4f 91       	pop	r20
 d6a:	3f 91       	pop	r19
 d6c:	2f 91       	pop	r18
 d6e:	0f 90       	pop	r0
 d70:	0f be       	out	0x3f, r0	; 63
 d72:	0f 90       	pop	r0
 d74:	1f 90       	pop	r1
 d76:	18 95       	reti

00000d78 <Timer1_voidInit>:
	}
}

void Timer1_voidResetPrescaler(void)
{
	SET_BIT(SFIOR, PSR10);	
 d78:	8e b5       	in	r24, 0x2e	; 46
 d7a:	80 61       	ori	r24, 0x10	; 16
 d7c:	8e bd       	out	0x2e, r24	; 46
 d7e:	8e b5       	in	r24, 0x2e	; 46
 d80:	88 60       	ori	r24, 0x08	; 8
 d82:	8e bd       	out	0x2e, r24	; 46
 d84:	8f b5       	in	r24, 0x2f	; 47
 d86:	8d 7f       	andi	r24, 0xFD	; 253
 d88:	8f bd       	out	0x2f, r24	; 47
 d8a:	8f b5       	in	r24, 0x2f	; 47
 d8c:	8e 7f       	andi	r24, 0xFE	; 254
 d8e:	8f bd       	out	0x2f, r24	; 47
 d90:	8f b5       	in	r24, 0x2f	; 47
 d92:	8f 77       	andi	r24, 0x7F	; 127
 d94:	8f bd       	out	0x2f, r24	; 47
 d96:	8f b5       	in	r24, 0x2f	; 47
 d98:	80 64       	ori	r24, 0x40	; 64
 d9a:	8f bd       	out	0x2f, r24	; 47
 d9c:	8f b5       	in	r24, 0x2f	; 47
 d9e:	8f 7d       	andi	r24, 0xDF	; 223
 da0:	8f bd       	out	0x2f, r24	; 47
 da2:	8f b5       	in	r24, 0x2f	; 47
 da4:	8f 7e       	andi	r24, 0xEF	; 239
 da6:	8f bd       	out	0x2f, r24	; 47
 da8:	8f b5       	in	r24, 0x2f	; 47
 daa:	87 7f       	andi	r24, 0xF7	; 247
 dac:	8f bd       	out	0x2f, r24	; 47
 dae:	8f b5       	in	r24, 0x2f	; 47
 db0:	8b 7f       	andi	r24, 0xFB	; 251
 db2:	8f bd       	out	0x2f, r24	; 47
 db4:	8e b5       	in	r24, 0x2e	; 46
 db6:	8f 7d       	andi	r24, 0xDF	; 223
 db8:	8e bd       	out	0x2e, r24	; 46
 dba:	8e b5       	in	r24, 0x2e	; 46
 dbc:	84 60       	ori	r24, 0x04	; 4
 dbe:	8e bd       	out	0x2e, r24	; 46
 dc0:	8e b5       	in	r24, 0x2e	; 46
 dc2:	8d 7f       	andi	r24, 0xFD	; 253
 dc4:	8e bd       	out	0x2e, r24	; 46
 dc6:	8e b5       	in	r24, 0x2e	; 46
 dc8:	8e 7f       	andi	r24, 0xFE	; 254
 dca:	8e bd       	out	0x2e, r24	; 46
 dcc:	08 95       	ret

00000dce <Timer1_voidPreload>:
 dce:	9d bd       	out	0x2d, r25	; 45
 dd0:	8c bd       	out	0x2c, r24	; 44
 dd2:	08 95       	ret

00000dd4 <Timer1_voidSetCounterTOP>:
 dd4:	83 30       	cpi	r24, 0x03	; 3
 dd6:	91 05       	cpc	r25, r1
 dd8:	10 f0       	brcs	.+4      	; 0xdde <Timer1_voidSetCounterTOP+0xa>
 dda:	97 bd       	out	0x27, r25	; 39
 ddc:	86 bd       	out	0x26, r24	; 38
 dde:	08 95       	ret

00000de0 <Timer1_voidOCAEnableInterrupt>:
 de0:	89 b7       	in	r24, 0x39	; 57
 de2:	80 61       	ori	r24, 0x10	; 16
 de4:	89 bf       	out	0x39, r24	; 57
 de6:	08 95       	ret

00000de8 <Timer1_voidOCASetCallBack>:
 de8:	00 97       	sbiw	r24, 0x00	; 0
 dea:	21 f0       	breq	.+8      	; 0xdf4 <Timer1_voidOCASetCallBack+0xc>
 dec:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <GLOB_VidTimer1OCAPtrCallBack+0x1>
 df0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <GLOB_VidTimer1OCAPtrCallBack>
 df4:	08 95       	ret

00000df6 <__vector_9>:
/************************************************************************************/
/*						PRIVATE FUNCTIONS IMPLEMENTATION							*/
/************************************************************************************/

void __vector_9(void)
{
 df6:	1f 92       	push	r1
 df8:	0f 92       	push	r0
 dfa:	0f b6       	in	r0, 0x3f	; 63
 dfc:	0f 92       	push	r0
 dfe:	11 24       	eor	r1, r1
 e00:	2f 93       	push	r18
 e02:	3f 93       	push	r19
 e04:	4f 93       	push	r20
 e06:	5f 93       	push	r21
 e08:	6f 93       	push	r22
 e0a:	7f 93       	push	r23
 e0c:	8f 93       	push	r24
 e0e:	9f 93       	push	r25
 e10:	af 93       	push	r26
 e12:	bf 93       	push	r27
 e14:	ef 93       	push	r30
 e16:	ff 93       	push	r31
	if (GLOB_VidTimer1OVFPtrCallBack != NULL)
 e18:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <GLOB_VidTimer1OVFPtrCallBack>
 e1c:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <GLOB_VidTimer1OVFPtrCallBack+0x1>
 e20:	30 97       	sbiw	r30, 0x00	; 0
 e22:	09 f0       	breq	.+2      	; 0xe26 <__vector_9+0x30>
	{
		(*GLOB_VidTimer1OVFPtrCallBack)();
 e24:	09 95       	icall
	}
}
 e26:	ff 91       	pop	r31
 e28:	ef 91       	pop	r30
 e2a:	bf 91       	pop	r27
 e2c:	af 91       	pop	r26
 e2e:	9f 91       	pop	r25
 e30:	8f 91       	pop	r24
 e32:	7f 91       	pop	r23
 e34:	6f 91       	pop	r22
 e36:	5f 91       	pop	r21
 e38:	4f 91       	pop	r20
 e3a:	3f 91       	pop	r19
 e3c:	2f 91       	pop	r18
 e3e:	0f 90       	pop	r0
 e40:	0f be       	out	0x3f, r0	; 63
 e42:	0f 90       	pop	r0
 e44:	1f 90       	pop	r1
 e46:	18 95       	reti

00000e48 <__vector_8>:

void __vector_8(void)
{
 e48:	1f 92       	push	r1
 e4a:	0f 92       	push	r0
 e4c:	0f b6       	in	r0, 0x3f	; 63
 e4e:	0f 92       	push	r0
 e50:	11 24       	eor	r1, r1
 e52:	2f 93       	push	r18
 e54:	3f 93       	push	r19
 e56:	4f 93       	push	r20
 e58:	5f 93       	push	r21
 e5a:	6f 93       	push	r22
 e5c:	7f 93       	push	r23
 e5e:	8f 93       	push	r24
 e60:	9f 93       	push	r25
 e62:	af 93       	push	r26
 e64:	bf 93       	push	r27
 e66:	ef 93       	push	r30
 e68:	ff 93       	push	r31
	if (GLOB_VidTimer1OCBPtrCallBack != NULL)
 e6a:	e0 91 c8 00 	lds	r30, 0x00C8	; 0x8000c8 <GLOB_VidTimer1OCBPtrCallBack>
 e6e:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <GLOB_VidTimer1OCBPtrCallBack+0x1>
 e72:	30 97       	sbiw	r30, 0x00	; 0
 e74:	09 f0       	breq	.+2      	; 0xe78 <__vector_8+0x30>
	{
		(*GLOB_VidTimer1OCBPtrCallBack)();
 e76:	09 95       	icall
	}
}
 e78:	ff 91       	pop	r31
 e7a:	ef 91       	pop	r30
 e7c:	bf 91       	pop	r27
 e7e:	af 91       	pop	r26
 e80:	9f 91       	pop	r25
 e82:	8f 91       	pop	r24
 e84:	7f 91       	pop	r23
 e86:	6f 91       	pop	r22
 e88:	5f 91       	pop	r21
 e8a:	4f 91       	pop	r20
 e8c:	3f 91       	pop	r19
 e8e:	2f 91       	pop	r18
 e90:	0f 90       	pop	r0
 e92:	0f be       	out	0x3f, r0	; 63
 e94:	0f 90       	pop	r0
 e96:	1f 90       	pop	r1
 e98:	18 95       	reti

00000e9a <__vector_7>:

void __vector_7(void)
{
 e9a:	1f 92       	push	r1
 e9c:	0f 92       	push	r0
 e9e:	0f b6       	in	r0, 0x3f	; 63
 ea0:	0f 92       	push	r0
 ea2:	11 24       	eor	r1, r1
 ea4:	2f 93       	push	r18
 ea6:	3f 93       	push	r19
 ea8:	4f 93       	push	r20
 eaa:	5f 93       	push	r21
 eac:	6f 93       	push	r22
 eae:	7f 93       	push	r23
 eb0:	8f 93       	push	r24
 eb2:	9f 93       	push	r25
 eb4:	af 93       	push	r26
 eb6:	bf 93       	push	r27
 eb8:	ef 93       	push	r30
 eba:	ff 93       	push	r31
	if (GLOB_VidTimer1OCAPtrCallBack != NULL)
 ebc:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <GLOB_VidTimer1OCAPtrCallBack>
 ec0:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <GLOB_VidTimer1OCAPtrCallBack+0x1>
 ec4:	30 97       	sbiw	r30, 0x00	; 0
 ec6:	09 f0       	breq	.+2      	; 0xeca <__vector_7+0x30>
	{
		(*GLOB_VidTimer1OCAPtrCallBack)();
 ec8:	09 95       	icall
	}
}
 eca:	ff 91       	pop	r31
 ecc:	ef 91       	pop	r30
 ece:	bf 91       	pop	r27
 ed0:	af 91       	pop	r26
 ed2:	9f 91       	pop	r25
 ed4:	8f 91       	pop	r24
 ed6:	7f 91       	pop	r23
 ed8:	6f 91       	pop	r22
 eda:	5f 91       	pop	r21
 edc:	4f 91       	pop	r20
 ede:	3f 91       	pop	r19
 ee0:	2f 91       	pop	r18
 ee2:	0f 90       	pop	r0
 ee4:	0f be       	out	0x3f, r0	; 63
 ee6:	0f 90       	pop	r0
 ee8:	1f 90       	pop	r1
 eea:	18 95       	reti

00000eec <__vector_6>:

void __vector_6(void)
{
 eec:	1f 92       	push	r1
 eee:	0f 92       	push	r0
 ef0:	0f b6       	in	r0, 0x3f	; 63
 ef2:	0f 92       	push	r0
 ef4:	11 24       	eor	r1, r1
 ef6:	2f 93       	push	r18
 ef8:	3f 93       	push	r19
 efa:	4f 93       	push	r20
 efc:	5f 93       	push	r21
 efe:	6f 93       	push	r22
 f00:	7f 93       	push	r23
 f02:	8f 93       	push	r24
 f04:	9f 93       	push	r25
 f06:	af 93       	push	r26
 f08:	bf 93       	push	r27
 f0a:	ef 93       	push	r30
 f0c:	ff 93       	push	r31
	if (GLOB_VidTimer1CaptureEventPtrCallBack != NULL)
 f0e:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <GLOB_VidTimer1CaptureEventPtrCallBack>
 f12:	f0 91 c7 00 	lds	r31, 0x00C7	; 0x8000c7 <GLOB_VidTimer1CaptureEventPtrCallBack+0x1>
 f16:	30 97       	sbiw	r30, 0x00	; 0
 f18:	09 f0       	breq	.+2      	; 0xf1c <__vector_6+0x30>
	{
		(*GLOB_VidTimer1CaptureEventPtrCallBack)();
 f1a:	09 95       	icall
	}
 f1c:	ff 91       	pop	r31
 f1e:	ef 91       	pop	r30
 f20:	bf 91       	pop	r27
 f22:	af 91       	pop	r26
 f24:	9f 91       	pop	r25
 f26:	8f 91       	pop	r24
 f28:	7f 91       	pop	r23
 f2a:	6f 91       	pop	r22
 f2c:	5f 91       	pop	r21
 f2e:	4f 91       	pop	r20
 f30:	3f 91       	pop	r19
 f32:	2f 91       	pop	r18
 f34:	0f 90       	pop	r0
 f36:	0f be       	out	0x3f, r0	; 63
 f38:	0f 90       	pop	r0
 f3a:	1f 90       	pop	r1
 f3c:	18 95       	reti

00000f3e <_exit>:
 f3e:	f8 94       	cli

00000f40 <__stop_program>:
 f40:	ff cf       	rjmp	.-2      	; 0xf40 <__stop_program>
